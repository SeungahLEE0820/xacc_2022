// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft2DKernel_fft2dKernel_512u_8u_16u_16u_4096u_22u_32u_2u_FFTParams_FFTParams2_40000u_80000u_complex_ap_fixed_22_8_5_3_0_complex_ap_fixed_32_18_5_3_0_Loop_VITIS_LOOP_126_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        n_images_dout,
        n_images_empty_n,
        n_images_read,
        fftInStrm_dout,
        fftInStrm_empty_n,
        fftInStrm_read,
        fftOutStrm_din,
        fftOutStrm_full_n,
        fftOutStrm_write,
        n_images_c_din,
        n_images_c_full_n,
        n_images_c_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] n_images_dout;
input   n_images_empty_n;
output   n_images_read;
input  [511:0] fftInStrm_dout;
input   fftInStrm_empty_n;
output   fftInStrm_read;
output  [511:0] fftOutStrm_din;
input   fftOutStrm_full_n;
output   fftOutStrm_write;
output  [31:0] n_images_c_din;
input   n_images_c_full_n;
output   n_images_c_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg n_images_read;
reg fftInStrm_read;
reg fftOutStrm_write;
reg n_images_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    n_images_blk_n;
reg    n_images_c_blk_n;
reg   [31:0] n_images_read_reg_535;
wire    grp_fft2dProc_fu_276_fftInStrm_read;
wire   [511:0] grp_fft2dProc_fu_276_fftOutStrm_din;
wire    grp_fft2dProc_fu_276_fftOutStrm_write;
wire    grp_fft2dProc_fu_276_ap_start;
wire    grp_fft2dProc_fu_276_ap_done;
wire    grp_fft2dProc_fu_276_ap_ready;
wire    grp_fft2dProc_fu_276_ap_idle;
reg    grp_fft2dProc_fu_276_ap_continue;
wire    grp_fft2dProc_fu_276_ap_ext_blocking_n;
wire    grp_fft2dProc_fu_276_ap_str_blocking_n;
wire    grp_fft2dProc_fu_276_ap_int_blocking_n;
reg    grp_fft2dProc_fu_276_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln126_fu_512_p2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_fft2dProc_fu_276_ap_ready;
wire    ap_sync_grp_fft2dProc_fu_276_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_fft2dProc_fu_276_ap_ready;
reg    ap_sync_reg_grp_fft2dProc_fu_276_ap_done;
reg   [30:0] n_fu_258;
wire   [30:0] n_5_fu_517_p2;
reg    ap_block_state1;
wire   [31:0] zext_ln126_fu_508_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_fft2dProc_fu_276_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_fft2dProc_fu_276_ap_ready = 1'b0;
#0 ap_sync_reg_grp_fft2dProc_fu_276_ap_done = 1'b0;
end

fft2DKernel_fft2dProc grp_fft2dProc_fu_276(
    .fftInStrm_dout(fftInStrm_dout),
    .fftInStrm_empty_n(fftInStrm_empty_n),
    .fftInStrm_read(grp_fft2dProc_fu_276_fftInStrm_read),
    .fftOutStrm_din(grp_fft2dProc_fu_276_fftOutStrm_din),
    .fftOutStrm_full_n(fftOutStrm_full_n),
    .fftOutStrm_write(grp_fft2dProc_fu_276_fftOutStrm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fft2dProc_fu_276_ap_start),
    .ap_done(grp_fft2dProc_fu_276_ap_done),
    .ap_ready(grp_fft2dProc_fu_276_ap_ready),
    .ap_idle(grp_fft2dProc_fu_276_ap_idle),
    .ap_continue(grp_fft2dProc_fu_276_ap_continue),
    .ap_ext_blocking_n(grp_fft2dProc_fu_276_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_fft2dProc_fu_276_ap_str_blocking_n),
    .ap_int_blocking_n(grp_fft2dProc_fu_276_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln126_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_fft2dProc_fu_276_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_fft2dProc_fu_276_ap_done <= 1'b0;
        end else if ((grp_fft2dProc_fu_276_ap_done == 1'b1)) begin
            ap_sync_reg_grp_fft2dProc_fu_276_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_fft2dProc_fu_276_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_fft2dProc_fu_276_ap_ready <= 1'b0;
        end else if ((grp_fft2dProc_fu_276_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_fft2dProc_fu_276_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fft2dProc_fu_276_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_fft2dProc_fu_276_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln126_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_fft2dProc_fu_276_ap_start_reg <= 1'b1;
        end else if ((grp_fft2dProc_fu_276_ap_ready == 1'b1)) begin
            grp_fft2dProc_fu_276_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (n_images_c_full_n == 1'b0) | (n_images_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_fu_258 <= 31'd0;
    end else if (((icmp_ln126_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        n_fu_258 <= n_5_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        n_images_read_reg_535 <= n_images_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (n_images_c_full_n == 1'b0) | (n_images_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_fft2dProc_fu_276_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_fft2dProc_fu_276_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_fft2dProc_fu_276_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fftInStrm_read = grp_fft2dProc_fu_276_fftInStrm_read;
    end else begin
        fftInStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fftOutStrm_write = grp_fft2dProc_fu_276_fftOutStrm_write;
    end else begin
        fftOutStrm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_fft2dProc_fu_276_ap_continue = 1'b1;
    end else begin
        grp_fft2dProc_fu_276_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_images_blk_n = n_images_empty_n;
    end else begin
        n_images_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_images_c_blk_n = n_images_c_full_n;
    end else begin
        n_images_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (n_images_c_full_n == 1'b0) | (n_images_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_images_c_write = 1'b1;
    end else begin
        n_images_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (n_images_c_full_n == 1'b0) | (n_images_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_images_read = 1'b1;
    end else begin
        n_images_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (n_images_c_full_n == 1'b0) | (n_images_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln126_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (n_images_c_full_n == 1'b0) | (n_images_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_fft2dProc_fu_276_ap_ready & ap_sync_grp_fft2dProc_fu_276_ap_done) == 1'b0);
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (n_images_c_blk_n & n_images_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign ap_sync_grp_fft2dProc_fu_276_ap_done = (grp_fft2dProc_fu_276_ap_done | ap_sync_reg_grp_fft2dProc_fu_276_ap_done);

assign ap_sync_grp_fft2dProc_fu_276_ap_ready = (grp_fft2dProc_fu_276_ap_ready | ap_sync_reg_grp_fft2dProc_fu_276_ap_ready);

assign fftOutStrm_din = grp_fft2dProc_fu_276_fftOutStrm_din;

assign grp_fft2dProc_fu_276_ap_start = grp_fft2dProc_fu_276_ap_start_reg;

assign icmp_ln126_fu_512_p2 = (($signed(zext_ln126_fu_508_p1) < $signed(n_images_read_reg_535)) ? 1'b1 : 1'b0);

assign n_5_fu_517_p2 = (n_fu_258 + 31'd1);

assign n_images_c_din = n_images_dout;

assign zext_ln126_fu_508_p1 = n_fu_258;

endmodule //fft2DKernel_fft2dKernel_512u_8u_16u_16u_4096u_22u_32u_2u_FFTParams_FFTParams2_40000u_80000u_complex_ap_fixed_22_8_5_3_0_complex_ap_fixed_32_18_5_3_0_Loop_VITIS_LOOP_126_1_proc
