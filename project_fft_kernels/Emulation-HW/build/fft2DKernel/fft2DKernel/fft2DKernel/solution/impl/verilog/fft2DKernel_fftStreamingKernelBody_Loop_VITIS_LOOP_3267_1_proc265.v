// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft2DKernel_fftStreamingKernelBody_Loop_VITIS_LOOP_3267_1_proc265 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fftInStrm_V_M_real_V_2_din,
        fftInStrm_V_M_real_V_2_full_n,
        fftInStrm_V_M_real_V_2_write,
        fftInStrm_V_M_imag_V_2_din,
        fftInStrm_V_M_imag_V_2_full_n,
        fftInStrm_V_M_imag_V_2_write,
        fftInStrm_V_M_real_V_1_din,
        fftInStrm_V_M_real_V_1_full_n,
        fftInStrm_V_M_real_V_1_write,
        fftInStrm_V_M_imag_V_1_din,
        fftInStrm_V_M_imag_V_1_full_n,
        fftInStrm_V_M_imag_V_1_write,
        fftInStrm_V_M_real_V_0_din,
        fftInStrm_V_M_real_V_0_full_n,
        fftInStrm_V_M_real_V_0_write,
        fftInStrm_V_M_imag_V_0_din,
        fftInStrm_V_M_imag_V_0_full_n,
        fftInStrm_V_M_imag_V_0_write,
        fftInStrm_V_M_real_V_3_din,
        fftInStrm_V_M_real_V_3_full_n,
        fftInStrm_V_M_real_V_3_write,
        fftInStrm_V_M_imag_V_3_din,
        fftInStrm_V_M_imag_V_3_full_n,
        fftInStrm_V_M_imag_V_3_write,
        start_out,
        start_write,
        p_inDataArray_M_real_V_0_address0,
        p_inDataArray_M_real_V_0_ce0,
        p_inDataArray_M_real_V_0_q0,
        p_inDataArray_M_real_V_1_address0,
        p_inDataArray_M_real_V_1_ce0,
        p_inDataArray_M_real_V_1_q0,
        p_inDataArray_M_real_V_2_address0,
        p_inDataArray_M_real_V_2_ce0,
        p_inDataArray_M_real_V_2_q0,
        p_inDataArray_M_real_V_3_address0,
        p_inDataArray_M_real_V_3_ce0,
        p_inDataArray_M_real_V_3_q0,
        p_inDataArray_M_imag_V_0_address0,
        p_inDataArray_M_imag_V_0_ce0,
        p_inDataArray_M_imag_V_0_q0,
        p_inDataArray_M_imag_V_1_address0,
        p_inDataArray_M_imag_V_1_ce0,
        p_inDataArray_M_imag_V_1_q0,
        p_inDataArray_M_imag_V_2_address0,
        p_inDataArray_M_imag_V_2_ce0,
        p_inDataArray_M_imag_V_2_q0,
        p_inDataArray_M_imag_V_3_address0,
        p_inDataArray_M_imag_V_3_ce0,
        p_inDataArray_M_imag_V_3_q0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [26:0] fftInStrm_V_M_real_V_2_din;
input   fftInStrm_V_M_real_V_2_full_n;
output   fftInStrm_V_M_real_V_2_write;
output  [26:0] fftInStrm_V_M_imag_V_2_din;
input   fftInStrm_V_M_imag_V_2_full_n;
output   fftInStrm_V_M_imag_V_2_write;
output  [26:0] fftInStrm_V_M_real_V_1_din;
input   fftInStrm_V_M_real_V_1_full_n;
output   fftInStrm_V_M_real_V_1_write;
output  [26:0] fftInStrm_V_M_imag_V_1_din;
input   fftInStrm_V_M_imag_V_1_full_n;
output   fftInStrm_V_M_imag_V_1_write;
output  [26:0] fftInStrm_V_M_real_V_0_din;
input   fftInStrm_V_M_real_V_0_full_n;
output   fftInStrm_V_M_real_V_0_write;
output  [26:0] fftInStrm_V_M_imag_V_0_din;
input   fftInStrm_V_M_imag_V_0_full_n;
output   fftInStrm_V_M_imag_V_0_write;
output  [26:0] fftInStrm_V_M_real_V_3_din;
input   fftInStrm_V_M_real_V_3_full_n;
output   fftInStrm_V_M_real_V_3_write;
output  [26:0] fftInStrm_V_M_imag_V_3_din;
input   fftInStrm_V_M_imag_V_3_full_n;
output   fftInStrm_V_M_imag_V_3_write;
output   start_out;
output   start_write;
output  [1:0] p_inDataArray_M_real_V_0_address0;
output   p_inDataArray_M_real_V_0_ce0;
input  [26:0] p_inDataArray_M_real_V_0_q0;
output  [1:0] p_inDataArray_M_real_V_1_address0;
output   p_inDataArray_M_real_V_1_ce0;
input  [26:0] p_inDataArray_M_real_V_1_q0;
output  [1:0] p_inDataArray_M_real_V_2_address0;
output   p_inDataArray_M_real_V_2_ce0;
input  [26:0] p_inDataArray_M_real_V_2_q0;
output  [1:0] p_inDataArray_M_real_V_3_address0;
output   p_inDataArray_M_real_V_3_ce0;
input  [26:0] p_inDataArray_M_real_V_3_q0;
output  [1:0] p_inDataArray_M_imag_V_0_address0;
output   p_inDataArray_M_imag_V_0_ce0;
input  [26:0] p_inDataArray_M_imag_V_0_q0;
output  [1:0] p_inDataArray_M_imag_V_1_address0;
output   p_inDataArray_M_imag_V_1_ce0;
input  [26:0] p_inDataArray_M_imag_V_1_q0;
output  [1:0] p_inDataArray_M_imag_V_2_address0;
output   p_inDataArray_M_imag_V_2_ce0;
input  [26:0] p_inDataArray_M_imag_V_2_q0;
output  [1:0] p_inDataArray_M_imag_V_3_address0;
output   p_inDataArray_M_imag_V_3_ce0;
input  [26:0] p_inDataArray_M_imag_V_3_q0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg fftInStrm_V_M_real_V_2_write;
reg fftInStrm_V_M_imag_V_2_write;
reg fftInStrm_V_M_real_V_1_write;
reg fftInStrm_V_M_imag_V_1_write;
reg fftInStrm_V_M_real_V_0_write;
reg fftInStrm_V_M_imag_V_0_write;
reg fftInStrm_V_M_real_V_3_write;
reg fftInStrm_V_M_imag_V_3_write;
reg start_write;
reg p_inDataArray_M_real_V_0_ce0;
reg p_inDataArray_M_real_V_1_ce0;
reg p_inDataArray_M_real_V_2_ce0;
reg p_inDataArray_M_real_V_3_ce0;
reg p_inDataArray_M_imag_V_0_ce0;
reg p_inDataArray_M_imag_V_1_ce0;
reg p_inDataArray_M_imag_V_2_ce0;
reg p_inDataArray_M_imag_V_3_ce0;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    io_acc_block_signal_op68;
reg   [1:0] trunc_ln3270_reg_399;
wire    io_acc_block_signal_op70;
wire    io_acc_block_signal_op72;
wire    io_acc_block_signal_op74;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln3267_fu_258_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fftInStrm_V_M_real_V_0_blk_n;
wire    ap_block_pp0_stage0;
reg    fftInStrm_V_M_imag_V_0_blk_n;
reg    fftInStrm_V_M_real_V_1_blk_n;
reg    fftInStrm_V_M_imag_V_1_blk_n;
reg    fftInStrm_V_M_real_V_2_blk_n;
reg    fftInStrm_V_M_imag_V_2_blk_n;
reg    fftInStrm_V_M_real_V_3_blk_n;
reg    fftInStrm_V_M_imag_V_3_blk_n;
wire   [1:0] trunc_ln3270_fu_316_p1;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln3267_fu_304_p1;
reg   [2:0] j_fu_84;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
wire   [2:0] add_ln3268_fu_320_p2;
reg   [2:0] i_fu_88;
reg   [2:0] ap_sig_allocacmp_i_load;
wire   [2:0] select_ln3267_1_fu_296_p3;
reg   [4:0] indvar_flatten_fu_92;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln3267_fu_264_p2;
wire   [26:0] tmp_fu_341_p6;
reg    ap_block_pp0_stage0_01001;
wire   [26:0] tmp_s_fu_358_p6;
wire   [0:0] icmp_ln3268_fu_276_p2;
wire   [2:0] add_ln3267_1_fu_290_p2;
wire   [2:0] select_ln3267_fu_282_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_227;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft2DKernel_mux_42_27_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 27 ),
    .din2_WIDTH( 27 ),
    .din3_WIDTH( 27 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 27 ))
mux_42_27_1_1_U1311(
    .din0(p_inDataArray_M_real_V_0_q0),
    .din1(p_inDataArray_M_real_V_1_q0),
    .din2(p_inDataArray_M_real_V_2_q0),
    .din3(p_inDataArray_M_real_V_3_q0),
    .din4(trunc_ln3270_reg_399),
    .dout(tmp_fu_341_p6)
);

fft2DKernel_mux_42_27_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 27 ),
    .din2_WIDTH( 27 ),
    .din3_WIDTH( 27 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 27 ))
mux_42_27_1_1_U1312(
    .din0(p_inDataArray_M_imag_V_0_q0),
    .din1(p_inDataArray_M_imag_V_1_q0),
    .din2(p_inDataArray_M_imag_V_2_q0),
    .din3(p_inDataArray_M_imag_V_3_q0),
    .din4(trunc_ln3270_reg_399),
    .dout(tmp_s_fu_358_p6)
);

fft2DKernel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_227)) begin
        if ((icmp_ln3267_fu_258_p2 == 1'd0)) begin
            i_fu_88 <= select_ln3267_1_fu_296_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_227)) begin
        if ((icmp_ln3267_fu_258_p2 == 1'd0)) begin
            indvar_flatten_fu_92 <= add_ln3267_fu_264_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_92 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_227)) begin
        if ((icmp_ln3267_fu_258_p2 == 1'd0)) begin
            j_fu_84 <= add_ln3268_fu_320_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_84 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3267_fu_258_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln3270_reg_399 <= trunc_ln3270_fu_316_p1;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3267_fu_258_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_88;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_92;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_84;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_imag_V_0_blk_n = fftInStrm_V_M_imag_V_0_full_n;
    end else begin
        fftInStrm_V_M_imag_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_imag_V_0_write = 1'b1;
    end else begin
        fftInStrm_V_M_imag_V_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_imag_V_1_blk_n = fftInStrm_V_M_imag_V_1_full_n;
    end else begin
        fftInStrm_V_M_imag_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_imag_V_1_write = 1'b1;
    end else begin
        fftInStrm_V_M_imag_V_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_imag_V_2_blk_n = fftInStrm_V_M_imag_V_2_full_n;
    end else begin
        fftInStrm_V_M_imag_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_imag_V_2_write = 1'b1;
    end else begin
        fftInStrm_V_M_imag_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_imag_V_3_blk_n = fftInStrm_V_M_imag_V_3_full_n;
    end else begin
        fftInStrm_V_M_imag_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_imag_V_3_write = 1'b1;
    end else begin
        fftInStrm_V_M_imag_V_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_real_V_0_blk_n = fftInStrm_V_M_real_V_0_full_n;
    end else begin
        fftInStrm_V_M_real_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_real_V_0_write = 1'b1;
    end else begin
        fftInStrm_V_M_real_V_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_real_V_1_blk_n = fftInStrm_V_M_real_V_1_full_n;
    end else begin
        fftInStrm_V_M_real_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_real_V_1_write = 1'b1;
    end else begin
        fftInStrm_V_M_real_V_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_real_V_2_blk_n = fftInStrm_V_M_real_V_2_full_n;
    end else begin
        fftInStrm_V_M_real_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_real_V_2_write = 1'b1;
    end else begin
        fftInStrm_V_M_real_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftInStrm_V_M_real_V_3_blk_n = fftInStrm_V_M_real_V_3_full_n;
    end else begin
        fftInStrm_V_M_real_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln3270_reg_399 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftInStrm_V_M_real_V_3_write = 1'b1;
    end else begin
        fftInStrm_V_M_real_V_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_imag_V_0_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_imag_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_imag_V_1_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_imag_V_2_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_imag_V_3_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_real_V_0_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_real_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_real_V_1_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_real_V_2_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_inDataArray_M_real_V_3_ce0 = 1'b1;
    end else begin
        p_inDataArray_M_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln3267_1_fu_290_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign add_ln3267_fu_264_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln3268_fu_320_p2 = (select_ln3267_fu_282_p3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op74 == 1'b0) & (trunc_ln3270_reg_399 == 2'd3)) | ((io_acc_block_signal_op72 == 1'b0) & (trunc_ln3270_reg_399 == 2'd0)) | ((io_acc_block_signal_op70 == 1'b0) & (trunc_ln3270_reg_399 == 2'd1)) | ((trunc_ln3270_reg_399 == 2'd2) & (io_acc_block_signal_op68 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op74 == 1'b0) & (trunc_ln3270_reg_399 == 2'd3)) | ((io_acc_block_signal_op72 == 1'b0) & (trunc_ln3270_reg_399 == 2'd0)) | ((io_acc_block_signal_op70 == 1'b0) & (trunc_ln3270_reg_399 == 2'd1)) | ((trunc_ln3270_reg_399 == 2'd2) & (io_acc_block_signal_op68 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op74 == 1'b0) & (trunc_ln3270_reg_399 == 2'd3)) | ((io_acc_block_signal_op72 == 1'b0) & (trunc_ln3270_reg_399 == 2'd0)) | ((io_acc_block_signal_op70 == 1'b0) & (trunc_ln3270_reg_399 == 2'd1)) | ((trunc_ln3270_reg_399 == 2'd2) & (io_acc_block_signal_op68 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((io_acc_block_signal_op74 == 1'b0) & (trunc_ln3270_reg_399 == 2'd3)) | ((io_acc_block_signal_op72 == 1'b0) & (trunc_ln3270_reg_399 == 2'd0)) | ((io_acc_block_signal_op70 == 1'b0) & (trunc_ln3270_reg_399 == 2'd1)) | ((trunc_ln3270_reg_399 == 2'd2) & (io_acc_block_signal_op68 == 1'b0)));
end

always @ (*) begin
    ap_condition_227 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (fftInStrm_V_M_real_V_3_blk_n & fftInStrm_V_M_real_V_2_blk_n & fftInStrm_V_M_real_V_1_blk_n & fftInStrm_V_M_real_V_0_blk_n & fftInStrm_V_M_imag_V_3_blk_n & fftInStrm_V_M_imag_V_2_blk_n & fftInStrm_V_M_imag_V_1_blk_n & fftInStrm_V_M_imag_V_0_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign fftInStrm_V_M_imag_V_0_din = tmp_s_fu_358_p6;

assign fftInStrm_V_M_imag_V_1_din = tmp_s_fu_358_p6;

assign fftInStrm_V_M_imag_V_2_din = tmp_s_fu_358_p6;

assign fftInStrm_V_M_imag_V_3_din = tmp_s_fu_358_p6;

assign fftInStrm_V_M_real_V_0_din = tmp_fu_341_p6;

assign fftInStrm_V_M_real_V_1_din = tmp_fu_341_p6;

assign fftInStrm_V_M_real_V_2_din = tmp_fu_341_p6;

assign fftInStrm_V_M_real_V_3_din = tmp_fu_341_p6;

assign icmp_ln3267_fu_258_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln3268_fu_276_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op68 = (fftInStrm_V_M_real_V_2_full_n & fftInStrm_V_M_imag_V_2_full_n);

assign io_acc_block_signal_op70 = (fftInStrm_V_M_real_V_1_full_n & fftInStrm_V_M_imag_V_1_full_n);

assign io_acc_block_signal_op72 = (fftInStrm_V_M_real_V_0_full_n & fftInStrm_V_M_imag_V_0_full_n);

assign io_acc_block_signal_op74 = (fftInStrm_V_M_real_V_3_full_n & fftInStrm_V_M_imag_V_3_full_n);

assign p_inDataArray_M_imag_V_0_address0 = zext_ln3267_fu_304_p1;

assign p_inDataArray_M_imag_V_1_address0 = zext_ln3267_fu_304_p1;

assign p_inDataArray_M_imag_V_2_address0 = zext_ln3267_fu_304_p1;

assign p_inDataArray_M_imag_V_3_address0 = zext_ln3267_fu_304_p1;

assign p_inDataArray_M_real_V_0_address0 = zext_ln3267_fu_304_p1;

assign p_inDataArray_M_real_V_1_address0 = zext_ln3267_fu_304_p1;

assign p_inDataArray_M_real_V_2_address0 = zext_ln3267_fu_304_p1;

assign p_inDataArray_M_real_V_3_address0 = zext_ln3267_fu_304_p1;

assign select_ln3267_1_fu_296_p3 = ((icmp_ln3268_fu_276_p2[0:0] == 1'b1) ? add_ln3267_1_fu_290_p2 : ap_sig_allocacmp_i_load);

assign select_ln3267_fu_282_p3 = ((icmp_ln3268_fu_276_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign start_out = real_start;

assign trunc_ln3270_fu_316_p1 = select_ln3267_fu_282_p3[1:0];

assign zext_ln3267_fu_304_p1 = select_ln3267_1_fu_296_p3;

endmodule //fft2DKernel_fftStreamingKernelBody_Loop_VITIS_LOOP_3267_1_proc265
