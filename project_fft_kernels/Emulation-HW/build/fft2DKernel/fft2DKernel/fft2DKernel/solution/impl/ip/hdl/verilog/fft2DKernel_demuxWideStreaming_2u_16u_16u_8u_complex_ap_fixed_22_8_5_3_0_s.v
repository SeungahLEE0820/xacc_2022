// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft2DKernel_demuxWideStreaming_2u_16u_16u_8u_complex_ap_fixed_22_8_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l_transBlkMatrixStream_dout,
        l_transBlkMatrixStream_empty_n,
        l_transBlkMatrixStream_read,
        p_outWideStream_0_0_0_0_0_0_din,
        p_outWideStream_0_0_0_0_0_0_full_n,
        p_outWideStream_0_0_0_0_0_0_write,
        p_outWideStream_0_0_0_0_0_01_din,
        p_outWideStream_0_0_0_0_0_01_full_n,
        p_outWideStream_0_0_0_0_0_01_write,
        p_outWideStream_0_0_0_0_0_02_din,
        p_outWideStream_0_0_0_0_0_02_full_n,
        p_outWideStream_0_0_0_0_0_02_write,
        p_outWideStream_0_0_0_0_0_03_din,
        p_outWideStream_0_0_0_0_0_03_full_n,
        p_outWideStream_0_0_0_0_0_03_write,
        p_outWideStream_0_0_0_0_0_04_din,
        p_outWideStream_0_0_0_0_0_04_full_n,
        p_outWideStream_0_0_0_0_0_04_write,
        p_outWideStream_0_0_0_0_0_05_din,
        p_outWideStream_0_0_0_0_0_05_full_n,
        p_outWideStream_0_0_0_0_0_05_write,
        p_outWideStream_0_0_0_0_0_06_din,
        p_outWideStream_0_0_0_0_0_06_full_n,
        p_outWideStream_0_0_0_0_0_06_write,
        p_outWideStream_0_0_0_0_0_07_din,
        p_outWideStream_0_0_0_0_0_07_full_n,
        p_outWideStream_0_0_0_0_0_07_write,
        p_outWideStream_0_0_1_0_0_0_din,
        p_outWideStream_0_0_1_0_0_0_full_n,
        p_outWideStream_0_0_1_0_0_0_write,
        p_outWideStream_0_0_1_0_0_016_din,
        p_outWideStream_0_0_1_0_0_016_full_n,
        p_outWideStream_0_0_1_0_0_016_write,
        p_outWideStream_0_0_1_0_0_017_din,
        p_outWideStream_0_0_1_0_0_017_full_n,
        p_outWideStream_0_0_1_0_0_017_write,
        p_outWideStream_0_0_1_0_0_018_din,
        p_outWideStream_0_0_1_0_0_018_full_n,
        p_outWideStream_0_0_1_0_0_018_write,
        p_outWideStream_0_0_1_0_0_019_din,
        p_outWideStream_0_0_1_0_0_019_full_n,
        p_outWideStream_0_0_1_0_0_019_write,
        p_outWideStream_0_0_1_0_0_020_din,
        p_outWideStream_0_0_1_0_0_020_full_n,
        p_outWideStream_0_0_1_0_0_020_write,
        p_outWideStream_0_0_1_0_0_021_din,
        p_outWideStream_0_0_1_0_0_021_full_n,
        p_outWideStream_0_0_1_0_0_021_write,
        p_outWideStream_0_0_1_0_0_022_din,
        p_outWideStream_0_0_1_0_0_022_full_n,
        p_outWideStream_0_0_1_0_0_022_write,
        p_outWideStream_0_0_0_0_0_018_din,
        p_outWideStream_0_0_0_0_0_018_full_n,
        p_outWideStream_0_0_0_0_0_018_write,
        p_outWideStream_0_0_0_0_0_019_din,
        p_outWideStream_0_0_0_0_0_019_full_n,
        p_outWideStream_0_0_0_0_0_019_write,
        p_outWideStream_0_0_0_0_0_0110_din,
        p_outWideStream_0_0_0_0_0_0110_full_n,
        p_outWideStream_0_0_0_0_0_0110_write,
        p_outWideStream_0_0_0_0_0_0111_din,
        p_outWideStream_0_0_0_0_0_0111_full_n,
        p_outWideStream_0_0_0_0_0_0111_write,
        p_outWideStream_0_0_0_0_0_0112_din,
        p_outWideStream_0_0_0_0_0_0112_full_n,
        p_outWideStream_0_0_0_0_0_0112_write,
        p_outWideStream_0_0_0_0_0_0113_din,
        p_outWideStream_0_0_0_0_0_0113_full_n,
        p_outWideStream_0_0_0_0_0_0113_write,
        p_outWideStream_0_0_0_0_0_0114_din,
        p_outWideStream_0_0_0_0_0_0114_full_n,
        p_outWideStream_0_0_0_0_0_0114_write,
        p_outWideStream_0_0_0_0_0_0115_din,
        p_outWideStream_0_0_0_0_0_0115_full_n,
        p_outWideStream_0_0_0_0_0_0115_write,
        p_outWideStream_0_0_1_0_0_02_din,
        p_outWideStream_0_0_1_0_0_02_full_n,
        p_outWideStream_0_0_1_0_0_02_write,
        p_outWideStream_0_0_1_0_0_0223_din,
        p_outWideStream_0_0_1_0_0_0223_full_n,
        p_outWideStream_0_0_1_0_0_0223_write,
        p_outWideStream_0_0_1_0_0_0224_din,
        p_outWideStream_0_0_1_0_0_0224_full_n,
        p_outWideStream_0_0_1_0_0_0224_write,
        p_outWideStream_0_0_1_0_0_0225_din,
        p_outWideStream_0_0_1_0_0_0225_full_n,
        p_outWideStream_0_0_1_0_0_0225_write,
        p_outWideStream_0_0_1_0_0_0226_din,
        p_outWideStream_0_0_1_0_0_0226_full_n,
        p_outWideStream_0_0_1_0_0_0226_write,
        p_outWideStream_0_0_1_0_0_0227_din,
        p_outWideStream_0_0_1_0_0_0227_full_n,
        p_outWideStream_0_0_1_0_0_0227_write,
        p_outWideStream_0_0_1_0_0_0228_din,
        p_outWideStream_0_0_1_0_0_0228_full_n,
        p_outWideStream_0_0_1_0_0_0228_write,
        p_outWideStream_0_0_1_0_0_0229_din,
        p_outWideStream_0_0_1_0_0_0229_full_n,
        p_outWideStream_0_0_1_0_0_0229_write,
        start_out,
        start_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] l_transBlkMatrixStream_dout;
input   l_transBlkMatrixStream_empty_n;
output   l_transBlkMatrixStream_read;
output  [21:0] p_outWideStream_0_0_0_0_0_0_din;
input   p_outWideStream_0_0_0_0_0_0_full_n;
output   p_outWideStream_0_0_0_0_0_0_write;
output  [21:0] p_outWideStream_0_0_0_0_0_01_din;
input   p_outWideStream_0_0_0_0_0_01_full_n;
output   p_outWideStream_0_0_0_0_0_01_write;
output  [21:0] p_outWideStream_0_0_0_0_0_02_din;
input   p_outWideStream_0_0_0_0_0_02_full_n;
output   p_outWideStream_0_0_0_0_0_02_write;
output  [21:0] p_outWideStream_0_0_0_0_0_03_din;
input   p_outWideStream_0_0_0_0_0_03_full_n;
output   p_outWideStream_0_0_0_0_0_03_write;
output  [21:0] p_outWideStream_0_0_0_0_0_04_din;
input   p_outWideStream_0_0_0_0_0_04_full_n;
output   p_outWideStream_0_0_0_0_0_04_write;
output  [21:0] p_outWideStream_0_0_0_0_0_05_din;
input   p_outWideStream_0_0_0_0_0_05_full_n;
output   p_outWideStream_0_0_0_0_0_05_write;
output  [21:0] p_outWideStream_0_0_0_0_0_06_din;
input   p_outWideStream_0_0_0_0_0_06_full_n;
output   p_outWideStream_0_0_0_0_0_06_write;
output  [21:0] p_outWideStream_0_0_0_0_0_07_din;
input   p_outWideStream_0_0_0_0_0_07_full_n;
output   p_outWideStream_0_0_0_0_0_07_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0_din;
input   p_outWideStream_0_0_1_0_0_0_full_n;
output   p_outWideStream_0_0_1_0_0_0_write;
output  [21:0] p_outWideStream_0_0_1_0_0_016_din;
input   p_outWideStream_0_0_1_0_0_016_full_n;
output   p_outWideStream_0_0_1_0_0_016_write;
output  [21:0] p_outWideStream_0_0_1_0_0_017_din;
input   p_outWideStream_0_0_1_0_0_017_full_n;
output   p_outWideStream_0_0_1_0_0_017_write;
output  [21:0] p_outWideStream_0_0_1_0_0_018_din;
input   p_outWideStream_0_0_1_0_0_018_full_n;
output   p_outWideStream_0_0_1_0_0_018_write;
output  [21:0] p_outWideStream_0_0_1_0_0_019_din;
input   p_outWideStream_0_0_1_0_0_019_full_n;
output   p_outWideStream_0_0_1_0_0_019_write;
output  [21:0] p_outWideStream_0_0_1_0_0_020_din;
input   p_outWideStream_0_0_1_0_0_020_full_n;
output   p_outWideStream_0_0_1_0_0_020_write;
output  [21:0] p_outWideStream_0_0_1_0_0_021_din;
input   p_outWideStream_0_0_1_0_0_021_full_n;
output   p_outWideStream_0_0_1_0_0_021_write;
output  [21:0] p_outWideStream_0_0_1_0_0_022_din;
input   p_outWideStream_0_0_1_0_0_022_full_n;
output   p_outWideStream_0_0_1_0_0_022_write;
output  [21:0] p_outWideStream_0_0_0_0_0_018_din;
input   p_outWideStream_0_0_0_0_0_018_full_n;
output   p_outWideStream_0_0_0_0_0_018_write;
output  [21:0] p_outWideStream_0_0_0_0_0_019_din;
input   p_outWideStream_0_0_0_0_0_019_full_n;
output   p_outWideStream_0_0_0_0_0_019_write;
output  [21:0] p_outWideStream_0_0_0_0_0_0110_din;
input   p_outWideStream_0_0_0_0_0_0110_full_n;
output   p_outWideStream_0_0_0_0_0_0110_write;
output  [21:0] p_outWideStream_0_0_0_0_0_0111_din;
input   p_outWideStream_0_0_0_0_0_0111_full_n;
output   p_outWideStream_0_0_0_0_0_0111_write;
output  [21:0] p_outWideStream_0_0_0_0_0_0112_din;
input   p_outWideStream_0_0_0_0_0_0112_full_n;
output   p_outWideStream_0_0_0_0_0_0112_write;
output  [21:0] p_outWideStream_0_0_0_0_0_0113_din;
input   p_outWideStream_0_0_0_0_0_0113_full_n;
output   p_outWideStream_0_0_0_0_0_0113_write;
output  [21:0] p_outWideStream_0_0_0_0_0_0114_din;
input   p_outWideStream_0_0_0_0_0_0114_full_n;
output   p_outWideStream_0_0_0_0_0_0114_write;
output  [21:0] p_outWideStream_0_0_0_0_0_0115_din;
input   p_outWideStream_0_0_0_0_0_0115_full_n;
output   p_outWideStream_0_0_0_0_0_0115_write;
output  [21:0] p_outWideStream_0_0_1_0_0_02_din;
input   p_outWideStream_0_0_1_0_0_02_full_n;
output   p_outWideStream_0_0_1_0_0_02_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0223_din;
input   p_outWideStream_0_0_1_0_0_0223_full_n;
output   p_outWideStream_0_0_1_0_0_0223_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0224_din;
input   p_outWideStream_0_0_1_0_0_0224_full_n;
output   p_outWideStream_0_0_1_0_0_0224_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0225_din;
input   p_outWideStream_0_0_1_0_0_0225_full_n;
output   p_outWideStream_0_0_1_0_0_0225_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0226_din;
input   p_outWideStream_0_0_1_0_0_0226_full_n;
output   p_outWideStream_0_0_1_0_0_0226_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0227_din;
input   p_outWideStream_0_0_1_0_0_0227_full_n;
output   p_outWideStream_0_0_1_0_0_0227_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0228_din;
input   p_outWideStream_0_0_1_0_0_0228_full_n;
output   p_outWideStream_0_0_1_0_0_0228_write;
output  [21:0] p_outWideStream_0_0_1_0_0_0229_din;
input   p_outWideStream_0_0_1_0_0_0229_full_n;
output   p_outWideStream_0_0_1_0_0_0229_write;
output   start_out;
output   start_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg l_transBlkMatrixStream_read;
reg p_outWideStream_0_0_0_0_0_0_write;
reg p_outWideStream_0_0_0_0_0_01_write;
reg p_outWideStream_0_0_0_0_0_02_write;
reg p_outWideStream_0_0_0_0_0_03_write;
reg p_outWideStream_0_0_0_0_0_04_write;
reg p_outWideStream_0_0_0_0_0_05_write;
reg p_outWideStream_0_0_0_0_0_06_write;
reg p_outWideStream_0_0_0_0_0_07_write;
reg p_outWideStream_0_0_1_0_0_0_write;
reg p_outWideStream_0_0_1_0_0_016_write;
reg p_outWideStream_0_0_1_0_0_017_write;
reg p_outWideStream_0_0_1_0_0_018_write;
reg p_outWideStream_0_0_1_0_0_019_write;
reg p_outWideStream_0_0_1_0_0_020_write;
reg p_outWideStream_0_0_1_0_0_021_write;
reg p_outWideStream_0_0_1_0_0_022_write;
reg p_outWideStream_0_0_0_0_0_018_write;
reg p_outWideStream_0_0_0_0_0_019_write;
reg p_outWideStream_0_0_0_0_0_0110_write;
reg p_outWideStream_0_0_0_0_0_0111_write;
reg p_outWideStream_0_0_0_0_0_0112_write;
reg p_outWideStream_0_0_0_0_0_0113_write;
reg p_outWideStream_0_0_0_0_0_0114_write;
reg p_outWideStream_0_0_0_0_0_0115_write;
reg p_outWideStream_0_0_1_0_0_02_write;
reg p_outWideStream_0_0_1_0_0_0223_write;
reg p_outWideStream_0_0_1_0_0_0224_write;
reg p_outWideStream_0_0_1_0_0_0225_write;
reg p_outWideStream_0_0_1_0_0_0226_write;
reg p_outWideStream_0_0_1_0_0_0227_write;
reg p_outWideStream_0_0_1_0_0_0228_write;
reg p_outWideStream_0_0_1_0_0_0229_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] icmp_ln52_fu_498_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op72;
reg   [0:0] outStreamPtr2_reg_303;
wire    io_acc_block_signal_op74;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    l_transBlkMatrixStream_blk_n;
wire    ap_block_pp0_stage0;
reg    p_outWideStream_0_0_0_0_0_0_blk_n;
reg    p_outWideStream_0_0_0_0_0_01_blk_n;
reg    p_outWideStream_0_0_0_0_0_02_blk_n;
reg    p_outWideStream_0_0_0_0_0_03_blk_n;
reg    p_outWideStream_0_0_0_0_0_04_blk_n;
reg    p_outWideStream_0_0_0_0_0_05_blk_n;
reg    p_outWideStream_0_0_0_0_0_06_blk_n;
reg    p_outWideStream_0_0_0_0_0_07_blk_n;
reg    p_outWideStream_0_0_0_0_0_018_blk_n;
reg    p_outWideStream_0_0_0_0_0_019_blk_n;
reg    p_outWideStream_0_0_0_0_0_0110_blk_n;
reg    p_outWideStream_0_0_0_0_0_0111_blk_n;
reg    p_outWideStream_0_0_0_0_0_0112_blk_n;
reg    p_outWideStream_0_0_0_0_0_0113_blk_n;
reg    p_outWideStream_0_0_0_0_0_0114_blk_n;
reg    p_outWideStream_0_0_0_0_0_0115_blk_n;
reg    p_outWideStream_0_0_1_0_0_0_blk_n;
reg    p_outWideStream_0_0_1_0_0_016_blk_n;
reg    p_outWideStream_0_0_1_0_0_017_blk_n;
reg    p_outWideStream_0_0_1_0_0_018_blk_n;
reg    p_outWideStream_0_0_1_0_0_019_blk_n;
reg    p_outWideStream_0_0_1_0_0_020_blk_n;
reg    p_outWideStream_0_0_1_0_0_021_blk_n;
reg    p_outWideStream_0_0_1_0_0_022_blk_n;
reg    p_outWideStream_0_0_1_0_0_02_blk_n;
reg    p_outWideStream_0_0_1_0_0_0223_blk_n;
reg    p_outWideStream_0_0_1_0_0_0224_blk_n;
reg    p_outWideStream_0_0_1_0_0_0225_blk_n;
reg    p_outWideStream_0_0_1_0_0_0226_blk_n;
reg    p_outWideStream_0_0_1_0_0_0227_blk_n;
reg    p_outWideStream_0_0_1_0_0_0228_blk_n;
reg    p_outWideStream_0_0_1_0_0_0229_blk_n;
reg   [4:0] iter1_reg_318;
wire   [21:0] trunc_ln174_fu_332_p1;
reg   [21:0] trunc_ln174_reg_506;
reg   [21:0] trunc_ln174_s_reg_512;
reg   [21:0] trunc_ln174_15_reg_518;
reg   [21:0] trunc_ln174_16_reg_524;
reg   [21:0] trunc_ln174_17_reg_530;
reg   [21:0] trunc_ln174_18_reg_536;
reg   [21:0] trunc_ln174_19_reg_542;
reg   [21:0] trunc_ln174_20_reg_548;
reg   [21:0] trunc_ln174_21_reg_554;
reg   [21:0] trunc_ln174_22_reg_560;
reg   [21:0] trunc_ln174_23_reg_566;
reg   [21:0] trunc_ln174_24_reg_572;
reg   [21:0] trunc_ln174_25_reg_578;
reg   [21:0] trunc_ln174_26_reg_584;
reg   [21:0] trunc_ln174_27_reg_590;
reg   [21:0] trunc_ln174_28_reg_596;
wire   [4:0] iter_fu_486_p2;
reg   [4:0] iter_reg_602;
wire   [0:0] outStreamPtr_fu_492_p2;
reg   [0:0] outStreamPtr_reg_607;
reg   [0:0] icmp_ln52_reg_612;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_outStreamPtr2_phi_fu_307_p6;
reg   [4:0] ap_phi_mux_iter1_phi_fu_322_p6;
reg    ap_block_pp0_stage0_01001;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_217;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln52_reg_612 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        iter1_reg_318 <= iter_reg_602;
    end else if ((((icmp_ln52_reg_612 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        iter1_reg_318 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_612 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        outStreamPtr2_reg_303 <= outStreamPtr_reg_607;
    end else if ((((icmp_ln52_reg_612 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        outStreamPtr2_reg_303 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_reg_612 <= icmp_ln52_fu_498_p2;
        trunc_ln174_15_reg_518 <= {{l_transBlkMatrixStream_dout[85:64]}};
        trunc_ln174_16_reg_524 <= {{l_transBlkMatrixStream_dout[117:96]}};
        trunc_ln174_17_reg_530 <= {{l_transBlkMatrixStream_dout[149:128]}};
        trunc_ln174_18_reg_536 <= {{l_transBlkMatrixStream_dout[181:160]}};
        trunc_ln174_19_reg_542 <= {{l_transBlkMatrixStream_dout[213:192]}};
        trunc_ln174_20_reg_548 <= {{l_transBlkMatrixStream_dout[245:224]}};
        trunc_ln174_21_reg_554 <= {{l_transBlkMatrixStream_dout[277:256]}};
        trunc_ln174_22_reg_560 <= {{l_transBlkMatrixStream_dout[309:288]}};
        trunc_ln174_23_reg_566 <= {{l_transBlkMatrixStream_dout[341:320]}};
        trunc_ln174_24_reg_572 <= {{l_transBlkMatrixStream_dout[373:352]}};
        trunc_ln174_25_reg_578 <= {{l_transBlkMatrixStream_dout[405:384]}};
        trunc_ln174_26_reg_584 <= {{l_transBlkMatrixStream_dout[437:416]}};
        trunc_ln174_27_reg_590 <= {{l_transBlkMatrixStream_dout[469:448]}};
        trunc_ln174_28_reg_596 <= {{l_transBlkMatrixStream_dout[501:480]}};
        trunc_ln174_reg_506 <= trunc_ln174_fu_332_p1;
        trunc_ln174_s_reg_512 <= {{l_transBlkMatrixStream_dout[53:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        iter_reg_602 <= iter_fu_486_p2;
        outStreamPtr_reg_607 <= outStreamPtr_fu_492_p2;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_612 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_217)) begin
        if ((icmp_ln52_reg_612 == 1'd1)) begin
            ap_phi_mux_iter1_phi_fu_322_p6 = 5'd0;
        end else if ((icmp_ln52_reg_612 == 1'd0)) begin
            ap_phi_mux_iter1_phi_fu_322_p6 = iter_reg_602;
        end else begin
            ap_phi_mux_iter1_phi_fu_322_p6 = iter1_reg_318;
        end
    end else begin
        ap_phi_mux_iter1_phi_fu_322_p6 = iter1_reg_318;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_217)) begin
        if ((icmp_ln52_reg_612 == 1'd1)) begin
            ap_phi_mux_outStreamPtr2_phi_fu_307_p6 = 1'd0;
        end else if ((icmp_ln52_reg_612 == 1'd0)) begin
            ap_phi_mux_outStreamPtr2_phi_fu_307_p6 = outStreamPtr_reg_607;
        end else begin
            ap_phi_mux_outStreamPtr2_phi_fu_307_p6 = outStreamPtr2_reg_303;
        end
    end else begin
        ap_phi_mux_outStreamPtr2_phi_fu_307_p6 = outStreamPtr2_reg_303;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (icmp_ln52_fu_498_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        l_transBlkMatrixStream_blk_n = l_transBlkMatrixStream_empty_n;
    end else begin
        l_transBlkMatrixStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_transBlkMatrixStream_read = 1'b1;
    end else begin
        l_transBlkMatrixStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0110_blk_n = p_outWideStream_0_0_0_0_0_0110_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_0110_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0110_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_0110_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0111_blk_n = p_outWideStream_0_0_0_0_0_0111_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_0111_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0111_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_0111_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0112_blk_n = p_outWideStream_0_0_0_0_0_0112_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_0112_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0112_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_0112_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0113_blk_n = p_outWideStream_0_0_0_0_0_0113_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_0113_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0113_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_0113_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0114_blk_n = p_outWideStream_0_0_0_0_0_0114_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_0114_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0114_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_0114_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0115_blk_n = p_outWideStream_0_0_0_0_0_0115_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_0115_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_0115_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_0115_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_018_blk_n = p_outWideStream_0_0_0_0_0_018_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_018_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_018_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_018_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_019_blk_n = p_outWideStream_0_0_0_0_0_019_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_019_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_0_0_0_019_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_019_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_01_blk_n = p_outWideStream_0_0_0_0_0_01_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_01_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_01_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_01_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_02_blk_n = p_outWideStream_0_0_0_0_0_02_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_02_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_02_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_02_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_03_blk_n = p_outWideStream_0_0_0_0_0_03_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_03_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_03_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_03_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_04_blk_n = p_outWideStream_0_0_0_0_0_04_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_04_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_04_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_04_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_05_blk_n = p_outWideStream_0_0_0_0_0_05_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_05_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_05_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_05_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_06_blk_n = p_outWideStream_0_0_0_0_0_06_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_06_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_06_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_06_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_07_blk_n = p_outWideStream_0_0_0_0_0_07_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_07_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_07_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_07_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_0_blk_n = p_outWideStream_0_0_0_0_0_0_full_n;
    end else begin
        p_outWideStream_0_0_0_0_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_0_0_0_0_write = 1'b1;
    end else begin
        p_outWideStream_0_0_0_0_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_016_blk_n = p_outWideStream_0_0_1_0_0_016_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_016_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_016_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_016_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_017_blk_n = p_outWideStream_0_0_1_0_0_017_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_017_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_017_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_017_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_018_blk_n = p_outWideStream_0_0_1_0_0_018_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_018_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_018_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_018_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_019_blk_n = p_outWideStream_0_0_1_0_0_019_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_019_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_019_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_019_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_020_blk_n = p_outWideStream_0_0_1_0_0_020_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_020_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_020_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_020_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_021_blk_n = p_outWideStream_0_0_1_0_0_021_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_021_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_021_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_021_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0223_blk_n = p_outWideStream_0_0_1_0_0_0223_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0223_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0223_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0223_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0224_blk_n = p_outWideStream_0_0_1_0_0_0224_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0224_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0224_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0224_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0225_blk_n = p_outWideStream_0_0_1_0_0_0225_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0225_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0225_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0225_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0226_blk_n = p_outWideStream_0_0_1_0_0_0226_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0226_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0226_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0226_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0227_blk_n = p_outWideStream_0_0_1_0_0_0227_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0227_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0227_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0227_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0228_blk_n = p_outWideStream_0_0_1_0_0_0228_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0228_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0228_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0228_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0229_blk_n = p_outWideStream_0_0_1_0_0_0229_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0229_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_0229_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0229_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_022_blk_n = p_outWideStream_0_0_1_0_0_022_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_022_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_022_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_022_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_02_blk_n = p_outWideStream_0_0_1_0_0_02_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_02_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd1))) begin
        p_outWideStream_0_0_1_0_0_02_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_02_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_0_blk_n = p_outWideStream_0_0_1_0_0_0_full_n;
    end else begin
        p_outWideStream_0_0_1_0_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outStreamPtr2_reg_303 == 1'd0))) begin
        p_outWideStream_0_0_1_0_0_0_write = 1'b1;
    end else begin
        p_outWideStream_0_0_1_0_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((l_transBlkMatrixStream_empty_n == 1'b0) & (real_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op74 == 1'b0) & (outStreamPtr2_reg_303 == 1'd1)) | ((outStreamPtr2_reg_303 == 1'd0) & (io_acc_block_signal_op72 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((l_transBlkMatrixStream_empty_n == 1'b0) & (real_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op74 == 1'b0) & (outStreamPtr2_reg_303 == 1'd1)) | ((outStreamPtr2_reg_303 == 1'd0) & (io_acc_block_signal_op72 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((l_transBlkMatrixStream_empty_n == 1'b0) & (real_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op74 == 1'b0) & (outStreamPtr2_reg_303 == 1'd1)) | ((outStreamPtr2_reg_303 == 1'd0) & (io_acc_block_signal_op72 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (l_transBlkMatrixStream_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((io_acc_block_signal_op74 == 1'b0) & (outStreamPtr2_reg_303 == 1'd1)) | ((outStreamPtr2_reg_303 == 1'd0) & (io_acc_block_signal_op72 == 1'b0)));
end

always @ (*) begin
    ap_condition_217 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (p_outWideStream_0_0_1_0_0_0_blk_n & p_outWideStream_0_0_1_0_0_02_blk_n & p_outWideStream_0_0_1_0_0_022_blk_n & p_outWideStream_0_0_1_0_0_0229_blk_n & p_outWideStream_0_0_1_0_0_0228_blk_n & p_outWideStream_0_0_1_0_0_0227_blk_n & p_outWideStream_0_0_1_0_0_0226_blk_n & p_outWideStream_0_0_1_0_0_0225_blk_n & p_outWideStream_0_0_1_0_0_0224_blk_n & p_outWideStream_0_0_1_0_0_0223_blk_n & p_outWideStream_0_0_1_0_0_021_blk_n & p_outWideStream_0_0_1_0_0_020_blk_n & p_outWideStream_0_0_1_0_0_019_blk_n & p_outWideStream_0_0_1_0_0_018_blk_n & p_outWideStream_0_0_1_0_0_017_blk_n & p_outWideStream_0_0_1_0_0_016_blk_n & p_outWideStream_0_0_0_0_0_0_blk_n & p_outWideStream_0_0_0_0_0_07_blk_n & p_outWideStream_0_0_0_0_0_06_blk_n & p_outWideStream_0_0_0_0_0_05_blk_n & p_outWideStream_0_0_0_0_0_04_blk_n & p_outWideStream_0_0_0_0_0_03_blk_n & p_outWideStream_0_0_0_0_0_02_blk_n & p_outWideStream_0_0_0_0_0_01_blk_n & p_outWideStream_0_0_0_0_0_019_blk_n & p_outWideStream_0_0_0_0_0_018_blk_n & p_outWideStream_0_0_0_0_0_0115_blk_n & p_outWideStream_0_0_0_0_0_0114_blk_n & p_outWideStream_0_0_0_0_0_0113_blk_n & p_outWideStream_0_0_0_0_0_0112_blk_n & p_outWideStream_0_0_0_0_0_0111_blk_n & p_outWideStream_0_0_0_0_0_0110_blk_n & l_transBlkMatrixStream_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign icmp_ln52_fu_498_p2 = ((ap_phi_mux_iter1_phi_fu_322_p6 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op72 = (p_outWideStream_0_0_1_0_0_0_full_n & p_outWideStream_0_0_1_0_0_022_full_n & p_outWideStream_0_0_1_0_0_021_full_n & p_outWideStream_0_0_1_0_0_020_full_n & p_outWideStream_0_0_1_0_0_019_full_n & p_outWideStream_0_0_1_0_0_018_full_n & p_outWideStream_0_0_1_0_0_017_full_n & p_outWideStream_0_0_1_0_0_016_full_n & p_outWideStream_0_0_0_0_0_0_full_n & p_outWideStream_0_0_0_0_0_07_full_n & p_outWideStream_0_0_0_0_0_06_full_n & p_outWideStream_0_0_0_0_0_05_full_n & p_outWideStream_0_0_0_0_0_04_full_n & p_outWideStream_0_0_0_0_0_03_full_n & p_outWideStream_0_0_0_0_0_02_full_n & p_outWideStream_0_0_0_0_0_01_full_n);

assign io_acc_block_signal_op74 = (p_outWideStream_0_0_1_0_0_02_full_n & p_outWideStream_0_0_1_0_0_0229_full_n & p_outWideStream_0_0_1_0_0_0228_full_n & p_outWideStream_0_0_1_0_0_0227_full_n & p_outWideStream_0_0_1_0_0_0226_full_n & p_outWideStream_0_0_1_0_0_0225_full_n & p_outWideStream_0_0_1_0_0_0224_full_n & p_outWideStream_0_0_1_0_0_0223_full_n & p_outWideStream_0_0_0_0_0_019_full_n & p_outWideStream_0_0_0_0_0_018_full_n & p_outWideStream_0_0_0_0_0_0115_full_n & p_outWideStream_0_0_0_0_0_0114_full_n & p_outWideStream_0_0_0_0_0_0113_full_n & p_outWideStream_0_0_0_0_0_0112_full_n & p_outWideStream_0_0_0_0_0_0111_full_n & p_outWideStream_0_0_0_0_0_0110_full_n);

assign iter_fu_486_p2 = (ap_phi_mux_iter1_phi_fu_322_p6 + 5'd1);

assign outStreamPtr_fu_492_p2 = (ap_phi_mux_outStreamPtr2_phi_fu_307_p6 ^ 1'd1);

assign p_outWideStream_0_0_0_0_0_0110_din = trunc_ln174_17_reg_530;

assign p_outWideStream_0_0_0_0_0_0111_din = trunc_ln174_19_reg_542;

assign p_outWideStream_0_0_0_0_0_0112_din = trunc_ln174_21_reg_554;

assign p_outWideStream_0_0_0_0_0_0113_din = trunc_ln174_23_reg_566;

assign p_outWideStream_0_0_0_0_0_0114_din = trunc_ln174_25_reg_578;

assign p_outWideStream_0_0_0_0_0_0115_din = trunc_ln174_27_reg_590;

assign p_outWideStream_0_0_0_0_0_018_din = trunc_ln174_reg_506;

assign p_outWideStream_0_0_0_0_0_019_din = trunc_ln174_15_reg_518;

assign p_outWideStream_0_0_0_0_0_01_din = trunc_ln174_15_reg_518;

assign p_outWideStream_0_0_0_0_0_02_din = trunc_ln174_17_reg_530;

assign p_outWideStream_0_0_0_0_0_03_din = trunc_ln174_19_reg_542;

assign p_outWideStream_0_0_0_0_0_04_din = trunc_ln174_21_reg_554;

assign p_outWideStream_0_0_0_0_0_05_din = trunc_ln174_23_reg_566;

assign p_outWideStream_0_0_0_0_0_06_din = trunc_ln174_25_reg_578;

assign p_outWideStream_0_0_0_0_0_07_din = trunc_ln174_27_reg_590;

assign p_outWideStream_0_0_0_0_0_0_din = trunc_ln174_reg_506;

assign p_outWideStream_0_0_1_0_0_016_din = trunc_ln174_16_reg_524;

assign p_outWideStream_0_0_1_0_0_017_din = trunc_ln174_18_reg_536;

assign p_outWideStream_0_0_1_0_0_018_din = trunc_ln174_20_reg_548;

assign p_outWideStream_0_0_1_0_0_019_din = trunc_ln174_22_reg_560;

assign p_outWideStream_0_0_1_0_0_020_din = trunc_ln174_24_reg_572;

assign p_outWideStream_0_0_1_0_0_021_din = trunc_ln174_26_reg_584;

assign p_outWideStream_0_0_1_0_0_0223_din = trunc_ln174_16_reg_524;

assign p_outWideStream_0_0_1_0_0_0224_din = trunc_ln174_18_reg_536;

assign p_outWideStream_0_0_1_0_0_0225_din = trunc_ln174_20_reg_548;

assign p_outWideStream_0_0_1_0_0_0226_din = trunc_ln174_22_reg_560;

assign p_outWideStream_0_0_1_0_0_0227_din = trunc_ln174_24_reg_572;

assign p_outWideStream_0_0_1_0_0_0228_din = trunc_ln174_26_reg_584;

assign p_outWideStream_0_0_1_0_0_0229_din = trunc_ln174_28_reg_596;

assign p_outWideStream_0_0_1_0_0_022_din = trunc_ln174_28_reg_596;

assign p_outWideStream_0_0_1_0_0_02_din = trunc_ln174_s_reg_512;

assign p_outWideStream_0_0_1_0_0_0_din = trunc_ln174_s_reg_512;

assign start_out = real_start;

assign trunc_ln174_fu_332_p1 = l_transBlkMatrixStream_dout[21:0];

endmodule //fft2DKernel_demuxWideStreaming_2u_16u_16u_8u_complex_ap_fixed_22_8_5_3_0_s
