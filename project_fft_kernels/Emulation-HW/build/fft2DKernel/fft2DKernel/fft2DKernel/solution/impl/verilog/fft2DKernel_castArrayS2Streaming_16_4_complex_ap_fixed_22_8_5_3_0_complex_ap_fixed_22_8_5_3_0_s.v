// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft2DKernel_castArrayS2Streaming_16_4_complex_ap_fixed_22_8_5_3_0_complex_ap_fixed_22_8_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_inData_0_0_0_0_0_dout,
        p_inData_0_0_0_0_0_empty_n,
        p_inData_0_0_0_0_0_read,
        p_inData_0_0_0_0_01_dout,
        p_inData_0_0_0_0_01_empty_n,
        p_inData_0_0_0_0_01_read,
        p_inData_0_0_0_0_02_dout,
        p_inData_0_0_0_0_02_empty_n,
        p_inData_0_0_0_0_02_read,
        p_inData_0_0_0_0_03_dout,
        p_inData_0_0_0_0_03_empty_n,
        p_inData_0_0_0_0_03_read,
        p_inData_0_1_0_0_0_dout,
        p_inData_0_1_0_0_0_empty_n,
        p_inData_0_1_0_0_0_read,
        p_inData_0_1_0_0_04_dout,
        p_inData_0_1_0_0_04_empty_n,
        p_inData_0_1_0_0_04_read,
        p_inData_0_1_0_0_05_dout,
        p_inData_0_1_0_0_05_empty_n,
        p_inData_0_1_0_0_05_read,
        p_inData_0_1_0_0_06_dout,
        p_inData_0_1_0_0_06_empty_n,
        p_inData_0_1_0_0_06_read,
        casted_output_din,
        casted_output_full_n,
        casted_output_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [21:0] p_inData_0_0_0_0_0_dout;
input   p_inData_0_0_0_0_0_empty_n;
output   p_inData_0_0_0_0_0_read;
input  [21:0] p_inData_0_0_0_0_01_dout;
input   p_inData_0_0_0_0_01_empty_n;
output   p_inData_0_0_0_0_01_read;
input  [21:0] p_inData_0_0_0_0_02_dout;
input   p_inData_0_0_0_0_02_empty_n;
output   p_inData_0_0_0_0_02_read;
input  [21:0] p_inData_0_0_0_0_03_dout;
input   p_inData_0_0_0_0_03_empty_n;
output   p_inData_0_0_0_0_03_read;
input  [21:0] p_inData_0_1_0_0_0_dout;
input   p_inData_0_1_0_0_0_empty_n;
output   p_inData_0_1_0_0_0_read;
input  [21:0] p_inData_0_1_0_0_04_dout;
input   p_inData_0_1_0_0_04_empty_n;
output   p_inData_0_1_0_0_04_read;
input  [21:0] p_inData_0_1_0_0_05_dout;
input   p_inData_0_1_0_0_05_empty_n;
output   p_inData_0_1_0_0_05_read;
input  [21:0] p_inData_0_1_0_0_06_dout;
input   p_inData_0_1_0_0_06_empty_n;
output   p_inData_0_1_0_0_06_read;
output  [255:0] casted_output_din;
input   casted_output_full_n;
output   casted_output_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_inData_0_0_0_0_0_read;
reg p_inData_0_0_0_0_01_read;
reg p_inData_0_0_0_0_02_read;
reg p_inData_0_0_0_0_03_read;
reg p_inData_0_1_0_0_0_read;
reg p_inData_0_1_0_0_04_read;
reg p_inData_0_1_0_0_05_read;
reg p_inData_0_1_0_0_06_read;
reg casted_output_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_inData_0_0_0_0_0_blk_n;
wire    ap_CS_fsm_state2;
reg    p_inData_0_0_0_0_01_blk_n;
reg    p_inData_0_0_0_0_02_blk_n;
reg    p_inData_0_0_0_0_03_blk_n;
reg    p_inData_0_1_0_0_0_blk_n;
reg    p_inData_0_1_0_0_04_blk_n;
reg    p_inData_0_1_0_0_05_blk_n;
reg    p_inData_0_1_0_0_06_blk_n;
reg    casted_output_blk_n;
wire   [1:0] t_fu_211_p2;
wire    io_acc_block_signal_op21;
wire    io_acc_block_signal_op24;
wire    io_acc_block_signal_op27;
wire    io_acc_block_signal_op30;
reg    ap_block_state2;
reg    ap_block_state1;
wire   [0:0] icmp_ln73_fu_217_p2;
reg   [1:0] t1_reg_126;
wire   [245:0] tmp_fu_172_p16;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_int_blocking_cur_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_217_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_217_p2 == 1'd0))) begin
        t1_reg_126 <= t_fu_211_p2;
    end else if (((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_217_p2 == 1'd1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        t1_reg_126 <= 2'd0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_217_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln73_fu_217_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        casted_output_blk_n = casted_output_full_n;
    end else begin
        casted_output_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        casted_output_write = 1'b1;
    end else begin
        casted_output_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_01_blk_n = p_inData_0_0_0_0_01_empty_n;
    end else begin
        p_inData_0_0_0_0_01_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_01_read = 1'b1;
    end else begin
        p_inData_0_0_0_0_01_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_02_blk_n = p_inData_0_0_0_0_02_empty_n;
    end else begin
        p_inData_0_0_0_0_02_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_02_read = 1'b1;
    end else begin
        p_inData_0_0_0_0_02_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_03_blk_n = p_inData_0_0_0_0_03_empty_n;
    end else begin
        p_inData_0_0_0_0_03_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_03_read = 1'b1;
    end else begin
        p_inData_0_0_0_0_03_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_0_blk_n = p_inData_0_0_0_0_0_empty_n;
    end else begin
        p_inData_0_0_0_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_0_0_0_0_read = 1'b1;
    end else begin
        p_inData_0_0_0_0_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_04_blk_n = p_inData_0_1_0_0_04_empty_n;
    end else begin
        p_inData_0_1_0_0_04_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_04_read = 1'b1;
    end else begin
        p_inData_0_1_0_0_04_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_05_blk_n = p_inData_0_1_0_0_05_empty_n;
    end else begin
        p_inData_0_1_0_0_05_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_05_read = 1'b1;
    end else begin
        p_inData_0_1_0_0_05_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_06_blk_n = p_inData_0_1_0_0_06_empty_n;
    end else begin
        p_inData_0_1_0_0_06_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_06_read = 1'b1;
    end else begin
        p_inData_0_1_0_0_06_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_0_blk_n = p_inData_0_1_0_0_0_empty_n;
    end else begin
        p_inData_0_1_0_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_inData_0_1_0_0_0_read = 1'b1;
    end else begin
        p_inData_0_1_0_0_0_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((io_acc_block_signal_op30 == 1'b0) | (io_acc_block_signal_op27 == 1'b0) | (io_acc_block_signal_op24 == 1'b0) | (io_acc_block_signal_op21 == 1'b0) | (ap_start == 1'b0) | (casted_output_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (p_inData_0_1_0_0_0_blk_n & p_inData_0_1_0_0_06_blk_n & p_inData_0_1_0_0_05_blk_n & p_inData_0_1_0_0_04_blk_n & p_inData_0_0_0_0_0_blk_n & p_inData_0_0_0_0_03_blk_n & p_inData_0_0_0_0_02_blk_n & p_inData_0_0_0_0_01_blk_n & casted_output_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign casted_output_din = tmp_fu_172_p16;

assign icmp_ln73_fu_217_p2 = ((t1_reg_126 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op21 = (p_inData_0_1_0_0_0_empty_n & p_inData_0_0_0_0_0_empty_n);

assign io_acc_block_signal_op24 = (p_inData_0_1_0_0_04_empty_n & p_inData_0_0_0_0_01_empty_n);

assign io_acc_block_signal_op27 = (p_inData_0_1_0_0_05_empty_n & p_inData_0_0_0_0_02_empty_n);

assign io_acc_block_signal_op30 = (p_inData_0_1_0_0_06_empty_n & p_inData_0_0_0_0_03_empty_n);

assign t_fu_211_p2 = (t1_reg_126 + 2'd1);

assign tmp_fu_172_p16 = {{{{{{{{{{{{{{{p_inData_0_1_0_0_06_dout}, {10'd0}}, {p_inData_0_0_0_0_03_dout}}, {10'd0}}, {p_inData_0_1_0_0_05_dout}}, {10'd0}}, {p_inData_0_0_0_0_02_dout}}, {10'd0}}, {p_inData_0_1_0_0_04_dout}}, {10'd0}}, {p_inData_0_0_0_0_01_dout}}, {10'd0}}, {p_inData_0_1_0_0_0_dout}}, {10'd0}}, {p_inData_0_0_0_0_0_dout}};

endmodule //fft2DKernel_castArrayS2Streaming_16_4_complex_ap_fixed_22_8_5_3_0_complex_ap_fixed_22_8_5_3_0_s
