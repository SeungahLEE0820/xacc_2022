// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft2DKernel_fftStreamingKernelBody_Loop_VITIS_LOOP_3276_1_proc264 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fftOutStrm_V_M_real_V_2_dout,
        fftOutStrm_V_M_real_V_2_empty_n,
        fftOutStrm_V_M_real_V_2_read,
        fftOutStrm_V_M_imag_V_2_dout,
        fftOutStrm_V_M_imag_V_2_empty_n,
        fftOutStrm_V_M_imag_V_2_read,
        fftOutStrm_V_M_real_V_1_dout,
        fftOutStrm_V_M_real_V_1_empty_n,
        fftOutStrm_V_M_real_V_1_read,
        fftOutStrm_V_M_imag_V_1_dout,
        fftOutStrm_V_M_imag_V_1_empty_n,
        fftOutStrm_V_M_imag_V_1_read,
        fftOutStrm_V_M_real_V_0_dout,
        fftOutStrm_V_M_real_V_0_empty_n,
        fftOutStrm_V_M_real_V_0_read,
        fftOutStrm_V_M_imag_V_0_dout,
        fftOutStrm_V_M_imag_V_0_empty_n,
        fftOutStrm_V_M_imag_V_0_read,
        fftOutStrm_V_M_real_V_3_dout,
        fftOutStrm_V_M_real_V_3_empty_n,
        fftOutStrm_V_M_real_V_3_read,
        fftOutStrm_V_M_imag_V_3_dout,
        fftOutStrm_V_M_imag_V_3_empty_n,
        fftOutStrm_V_M_imag_V_3_read,
        p_outDataArray_M_real_V_0_address0,
        p_outDataArray_M_real_V_0_ce0,
        p_outDataArray_M_real_V_0_we0,
        p_outDataArray_M_real_V_0_d0,
        p_outDataArray_M_real_V_1_address0,
        p_outDataArray_M_real_V_1_ce0,
        p_outDataArray_M_real_V_1_we0,
        p_outDataArray_M_real_V_1_d0,
        p_outDataArray_M_real_V_2_address0,
        p_outDataArray_M_real_V_2_ce0,
        p_outDataArray_M_real_V_2_we0,
        p_outDataArray_M_real_V_2_d0,
        p_outDataArray_M_real_V_3_address0,
        p_outDataArray_M_real_V_3_ce0,
        p_outDataArray_M_real_V_3_we0,
        p_outDataArray_M_real_V_3_d0,
        p_outDataArray_M_imag_V_0_address0,
        p_outDataArray_M_imag_V_0_ce0,
        p_outDataArray_M_imag_V_0_we0,
        p_outDataArray_M_imag_V_0_d0,
        p_outDataArray_M_imag_V_1_address0,
        p_outDataArray_M_imag_V_1_ce0,
        p_outDataArray_M_imag_V_1_we0,
        p_outDataArray_M_imag_V_1_d0,
        p_outDataArray_M_imag_V_2_address0,
        p_outDataArray_M_imag_V_2_ce0,
        p_outDataArray_M_imag_V_2_we0,
        p_outDataArray_M_imag_V_2_d0,
        p_outDataArray_M_imag_V_3_address0,
        p_outDataArray_M_imag_V_3_ce0,
        p_outDataArray_M_imag_V_3_we0,
        p_outDataArray_M_imag_V_3_d0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] fftOutStrm_V_M_real_V_2_dout;
input   fftOutStrm_V_M_real_V_2_empty_n;
output   fftOutStrm_V_M_real_V_2_read;
input  [31:0] fftOutStrm_V_M_imag_V_2_dout;
input   fftOutStrm_V_M_imag_V_2_empty_n;
output   fftOutStrm_V_M_imag_V_2_read;
input  [31:0] fftOutStrm_V_M_real_V_1_dout;
input   fftOutStrm_V_M_real_V_1_empty_n;
output   fftOutStrm_V_M_real_V_1_read;
input  [31:0] fftOutStrm_V_M_imag_V_1_dout;
input   fftOutStrm_V_M_imag_V_1_empty_n;
output   fftOutStrm_V_M_imag_V_1_read;
input  [31:0] fftOutStrm_V_M_real_V_0_dout;
input   fftOutStrm_V_M_real_V_0_empty_n;
output   fftOutStrm_V_M_real_V_0_read;
input  [31:0] fftOutStrm_V_M_imag_V_0_dout;
input   fftOutStrm_V_M_imag_V_0_empty_n;
output   fftOutStrm_V_M_imag_V_0_read;
input  [31:0] fftOutStrm_V_M_real_V_3_dout;
input   fftOutStrm_V_M_real_V_3_empty_n;
output   fftOutStrm_V_M_real_V_3_read;
input  [31:0] fftOutStrm_V_M_imag_V_3_dout;
input   fftOutStrm_V_M_imag_V_3_empty_n;
output   fftOutStrm_V_M_imag_V_3_read;
output  [1:0] p_outDataArray_M_real_V_0_address0;
output   p_outDataArray_M_real_V_0_ce0;
output   p_outDataArray_M_real_V_0_we0;
output  [31:0] p_outDataArray_M_real_V_0_d0;
output  [1:0] p_outDataArray_M_real_V_1_address0;
output   p_outDataArray_M_real_V_1_ce0;
output   p_outDataArray_M_real_V_1_we0;
output  [31:0] p_outDataArray_M_real_V_1_d0;
output  [1:0] p_outDataArray_M_real_V_2_address0;
output   p_outDataArray_M_real_V_2_ce0;
output   p_outDataArray_M_real_V_2_we0;
output  [31:0] p_outDataArray_M_real_V_2_d0;
output  [1:0] p_outDataArray_M_real_V_3_address0;
output   p_outDataArray_M_real_V_3_ce0;
output   p_outDataArray_M_real_V_3_we0;
output  [31:0] p_outDataArray_M_real_V_3_d0;
output  [1:0] p_outDataArray_M_imag_V_0_address0;
output   p_outDataArray_M_imag_V_0_ce0;
output   p_outDataArray_M_imag_V_0_we0;
output  [31:0] p_outDataArray_M_imag_V_0_d0;
output  [1:0] p_outDataArray_M_imag_V_1_address0;
output   p_outDataArray_M_imag_V_1_ce0;
output   p_outDataArray_M_imag_V_1_we0;
output  [31:0] p_outDataArray_M_imag_V_1_d0;
output  [1:0] p_outDataArray_M_imag_V_2_address0;
output   p_outDataArray_M_imag_V_2_ce0;
output   p_outDataArray_M_imag_V_2_we0;
output  [31:0] p_outDataArray_M_imag_V_2_d0;
output  [1:0] p_outDataArray_M_imag_V_3_address0;
output   p_outDataArray_M_imag_V_3_ce0;
output   p_outDataArray_M_imag_V_3_we0;
output  [31:0] p_outDataArray_M_imag_V_3_d0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg fftOutStrm_V_M_real_V_2_read;
reg fftOutStrm_V_M_imag_V_2_read;
reg fftOutStrm_V_M_real_V_1_read;
reg fftOutStrm_V_M_imag_V_1_read;
reg fftOutStrm_V_M_real_V_0_read;
reg fftOutStrm_V_M_imag_V_0_read;
reg fftOutStrm_V_M_real_V_3_read;
reg fftOutStrm_V_M_imag_V_3_read;
reg p_outDataArray_M_real_V_0_ce0;
reg p_outDataArray_M_real_V_0_we0;
reg p_outDataArray_M_real_V_1_ce0;
reg p_outDataArray_M_real_V_1_we0;
reg p_outDataArray_M_real_V_2_ce0;
reg p_outDataArray_M_real_V_2_we0;
reg p_outDataArray_M_real_V_3_ce0;
reg p_outDataArray_M_real_V_3_we0;
reg p_outDataArray_M_imag_V_0_ce0;
reg p_outDataArray_M_imag_V_0_we0;
reg p_outDataArray_M_imag_V_1_ce0;
reg p_outDataArray_M_imag_V_1_we0;
reg p_outDataArray_M_imag_V_2_ce0;
reg p_outDataArray_M_imag_V_2_we0;
reg p_outDataArray_M_imag_V_3_ce0;
reg p_outDataArray_M_imag_V_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    io_acc_block_signal_op41;
reg   [0:0] icmp_ln3276_reg_425;
reg   [1:0] trunc_ln145_reg_434;
reg    ap_predicate_op41_read_state2;
wire    io_acc_block_signal_op45;
reg    ap_predicate_op45_read_state2;
wire    io_acc_block_signal_op49;
reg    ap_predicate_op49_read_state2;
wire    io_acc_block_signal_op53;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln3276_fu_282_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fftOutStrm_V_M_real_V_0_blk_n;
wire    ap_block_pp0_stage0;
reg    fftOutStrm_V_M_imag_V_0_blk_n;
reg    fftOutStrm_V_M_real_V_1_blk_n;
reg    fftOutStrm_V_M_imag_V_1_blk_n;
reg    fftOutStrm_V_M_real_V_2_blk_n;
reg    fftOutStrm_V_M_imag_V_2_blk_n;
reg    fftOutStrm_V_M_real_V_3_blk_n;
reg    fftOutStrm_V_M_imag_V_3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln3277_fu_297_p2;
reg   [0:0] icmp_ln3277_reg_429;
wire   [1:0] trunc_ln145_fu_311_p1;
reg   [31:0] ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8;
wire   [31:0] ap_phi_reg_pp0_iter1_p_04_0_0_0_i2_0_reg_230;
reg   [31:0] ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8;
wire   [31:0] ap_phi_reg_pp0_iter1_p_15_0_0_0_i1_0_reg_247;
wire   [63:0] zext_ln3276_fu_347_p1;
reg   [2:0] j_fu_82;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
wire   [2:0] add_ln3277_fu_315_p2;
reg   [2:0] i_fu_86;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_i_load;
wire   [2:0] select_ln3276_2_fu_340_p3;
reg   [4:0] indvar_flatten_fu_90;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln3276_fu_288_p2;
wire   [2:0] select_ln3276_fu_303_p3;
wire   [2:0] add_ln3276_2_fu_334_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_220;
reg    ap_condition_255;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft2DKernel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_220)) begin
        i_fu_86 <= select_ln3276_2_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_255)) begin
    if ((icmp_ln3276_fu_282_p2 == 1'd0)) begin
        indvar_flatten_fu_90 <= add_ln3276_fu_288_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_90 <= 5'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_255)) begin
    if ((icmp_ln3276_fu_282_p2 == 1'd0)) begin
        j_fu_82 <= add_ln3277_fu_315_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        j_fu_82 <= 3'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln3276_reg_425 <= icmp_ln3276_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3276_fu_282_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln3277_reg_429 <= icmp_ln3277_fu_297_p2;
        trunc_ln145_reg_434 <= trunc_ln145_fu_311_p1;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3276_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln3276_reg_425 == 1'd0)) begin
        if ((trunc_ln145_reg_434 == 2'd0)) begin
            ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8 = fftOutStrm_V_M_real_V_0_dout;
        end else if ((trunc_ln145_reg_434 == 2'd1)) begin
            ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8 = fftOutStrm_V_M_real_V_1_dout;
        end else if ((trunc_ln145_reg_434 == 2'd2)) begin
            ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8 = fftOutStrm_V_M_real_V_2_dout;
        end else if ((trunc_ln145_reg_434 == 2'd3)) begin
            ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8 = fftOutStrm_V_M_real_V_3_dout;
        end else begin
            ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8 = ap_phi_reg_pp0_iter1_p_04_0_0_0_i2_0_reg_230;
        end
    end else begin
        ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8 = ap_phi_reg_pp0_iter1_p_04_0_0_0_i2_0_reg_230;
    end
end

always @ (*) begin
    if ((icmp_ln3276_reg_425 == 1'd0)) begin
        if ((trunc_ln145_reg_434 == 2'd0)) begin
            ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8 = fftOutStrm_V_M_imag_V_0_dout;
        end else if ((trunc_ln145_reg_434 == 2'd1)) begin
            ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8 = fftOutStrm_V_M_imag_V_1_dout;
        end else if ((trunc_ln145_reg_434 == 2'd2)) begin
            ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8 = fftOutStrm_V_M_imag_V_2_dout;
        end else if ((trunc_ln145_reg_434 == 2'd3)) begin
            ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8 = fftOutStrm_V_M_imag_V_3_dout;
        end else begin
            ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8 = ap_phi_reg_pp0_iter1_p_15_0_0_0_i1_0_reg_247;
        end
    end else begin
        ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8 = ap_phi_reg_pp0_iter1_p_15_0_0_0_i1_0_reg_247;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_86;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_90;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_82;
    end
end

always @ (*) begin
    if (((ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftOutStrm_V_M_imag_V_0_blk_n = fftOutStrm_V_M_imag_V_0_empty_n;
    end else begin
        fftOutStrm_V_M_imag_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftOutStrm_V_M_imag_V_0_read = 1'b1;
    end else begin
        fftOutStrm_V_M_imag_V_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op45_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftOutStrm_V_M_imag_V_1_blk_n = fftOutStrm_V_M_imag_V_1_empty_n;
    end else begin
        fftOutStrm_V_M_imag_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op45_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftOutStrm_V_M_imag_V_1_read = 1'b1;
    end else begin
        fftOutStrm_V_M_imag_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op41_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftOutStrm_V_M_imag_V_2_blk_n = fftOutStrm_V_M_imag_V_2_empty_n;
    end else begin
        fftOutStrm_V_M_imag_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op41_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftOutStrm_V_M_imag_V_2_read = 1'b1;
    end else begin
        fftOutStrm_V_M_imag_V_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op53_read_state2 == 1'b1))) begin
        fftOutStrm_V_M_imag_V_3_blk_n = fftOutStrm_V_M_imag_V_3_empty_n;
    end else begin
        fftOutStrm_V_M_imag_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op53_read_state2 == 1'b1))) begin
        fftOutStrm_V_M_imag_V_3_read = 1'b1;
    end else begin
        fftOutStrm_V_M_imag_V_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftOutStrm_V_M_real_V_0_blk_n = fftOutStrm_V_M_real_V_0_empty_n;
    end else begin
        fftOutStrm_V_M_real_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op49_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftOutStrm_V_M_real_V_0_read = 1'b1;
    end else begin
        fftOutStrm_V_M_real_V_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op45_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftOutStrm_V_M_real_V_1_blk_n = fftOutStrm_V_M_real_V_1_empty_n;
    end else begin
        fftOutStrm_V_M_real_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op45_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftOutStrm_V_M_real_V_1_read = 1'b1;
    end else begin
        fftOutStrm_V_M_real_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op41_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fftOutStrm_V_M_real_V_2_blk_n = fftOutStrm_V_M_real_V_2_empty_n;
    end else begin
        fftOutStrm_V_M_real_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op41_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fftOutStrm_V_M_real_V_2_read = 1'b1;
    end else begin
        fftOutStrm_V_M_real_V_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op53_read_state2 == 1'b1))) begin
        fftOutStrm_V_M_real_V_3_blk_n = fftOutStrm_V_M_real_V_3_empty_n;
    end else begin
        fftOutStrm_V_M_real_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op53_read_state2 == 1'b1))) begin
        fftOutStrm_V_M_real_V_3_read = 1'b1;
    end else begin
        fftOutStrm_V_M_real_V_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_0_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_0_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_1_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_1_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_2_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_2_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_3_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_imag_V_3_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_0_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_0_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_1_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_1_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_2_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_2_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_3_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln145_reg_434 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_outDataArray_M_real_V_3_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln3276_2_fu_334_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign add_ln3276_fu_288_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln3277_fu_315_p2 = (select_ln3276_fu_303_p3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op49_read_state2 == 1'b1) & (io_acc_block_signal_op49 == 1'b0)) | ((ap_predicate_op45_read_state2 == 1'b1) & (io_acc_block_signal_op45 == 1'b0)) | ((ap_predicate_op41_read_state2 == 1'b1) & (io_acc_block_signal_op41 == 1'b0)) | ((ap_predicate_op53_read_state2 == 1'b1) & (io_acc_block_signal_op53 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op49_read_state2 == 1'b1) & (io_acc_block_signal_op49 == 1'b0)) | ((ap_predicate_op45_read_state2 == 1'b1) & (io_acc_block_signal_op45 == 1'b0)) | ((ap_predicate_op41_read_state2 == 1'b1) & (io_acc_block_signal_op41 == 1'b0)) | ((ap_predicate_op53_read_state2 == 1'b1) & (io_acc_block_signal_op53 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op49_read_state2 == 1'b1) & (io_acc_block_signal_op49 == 1'b0)) | ((ap_predicate_op45_read_state2 == 1'b1) & (io_acc_block_signal_op45 == 1'b0)) | ((ap_predicate_op41_read_state2 == 1'b1) & (io_acc_block_signal_op41 == 1'b0)) | ((ap_predicate_op53_read_state2 == 1'b1) & (io_acc_block_signal_op53 == 1'b0)));
end

always @ (*) begin
    ap_condition_220 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_255 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (fftOutStrm_V_M_real_V_3_blk_n & fftOutStrm_V_M_real_V_2_blk_n & fftOutStrm_V_M_real_V_1_blk_n & fftOutStrm_V_M_real_V_0_blk_n & fftOutStrm_V_M_imag_V_3_blk_n & fftOutStrm_V_M_imag_V_2_blk_n & fftOutStrm_V_M_imag_V_1_blk_n & fftOutStrm_V_M_imag_V_0_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter1_p_04_0_0_0_i2_0_reg_230 = 'bx;

assign ap_phi_reg_pp0_iter1_p_15_0_0_0_i1_0_reg_247 = 'bx;

always @ (*) begin
    ap_predicate_op41_read_state2 = ((trunc_ln145_reg_434 == 2'd2) & (icmp_ln3276_reg_425 == 1'd0));
end

always @ (*) begin
    ap_predicate_op45_read_state2 = ((trunc_ln145_reg_434 == 2'd1) & (icmp_ln3276_reg_425 == 1'd0));
end

always @ (*) begin
    ap_predicate_op49_read_state2 = ((trunc_ln145_reg_434 == 2'd0) & (icmp_ln3276_reg_425 == 1'd0));
end

always @ (*) begin
    ap_predicate_op53_read_state2 = ((trunc_ln145_reg_434 == 2'd3) & (icmp_ln3276_reg_425 == 1'd0));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign icmp_ln3276_fu_282_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln3277_fu_297_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op41 = (fftOutStrm_V_M_real_V_2_empty_n & fftOutStrm_V_M_imag_V_2_empty_n);

assign io_acc_block_signal_op45 = (fftOutStrm_V_M_real_V_1_empty_n & fftOutStrm_V_M_imag_V_1_empty_n);

assign io_acc_block_signal_op49 = (fftOutStrm_V_M_real_V_0_empty_n & fftOutStrm_V_M_imag_V_0_empty_n);

assign io_acc_block_signal_op53 = (fftOutStrm_V_M_real_V_3_empty_n & fftOutStrm_V_M_imag_V_3_empty_n);

assign p_outDataArray_M_imag_V_0_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_imag_V_0_d0 = ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8;

assign p_outDataArray_M_imag_V_1_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_imag_V_1_d0 = ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8;

assign p_outDataArray_M_imag_V_2_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_imag_V_2_d0 = ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8;

assign p_outDataArray_M_imag_V_3_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_imag_V_3_d0 = ap_phi_mux_p_15_0_0_0_i1_0_phi_fu_250_p8;

assign p_outDataArray_M_real_V_0_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_real_V_0_d0 = ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8;

assign p_outDataArray_M_real_V_1_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_real_V_1_d0 = ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8;

assign p_outDataArray_M_real_V_2_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_real_V_2_d0 = ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8;

assign p_outDataArray_M_real_V_3_address0 = zext_ln3276_fu_347_p1;

assign p_outDataArray_M_real_V_3_d0 = ap_phi_mux_p_04_0_0_0_i2_0_phi_fu_233_p8;

assign select_ln3276_2_fu_340_p3 = ((icmp_ln3277_reg_429[0:0] == 1'b1) ? add_ln3276_2_fu_334_p2 : ap_sig_allocacmp_i_load);

assign select_ln3276_fu_303_p3 = ((icmp_ln3277_fu_297_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign trunc_ln145_fu_311_p1 = select_ln3276_fu_303_p3[1:0];

assign zext_ln3276_fu_347_p1 = select_ln3276_2_fu_340_p3;

endmodule //fft2DKernel_fftStreamingKernelBody_Loop_VITIS_LOOP_3276_1_proc264
