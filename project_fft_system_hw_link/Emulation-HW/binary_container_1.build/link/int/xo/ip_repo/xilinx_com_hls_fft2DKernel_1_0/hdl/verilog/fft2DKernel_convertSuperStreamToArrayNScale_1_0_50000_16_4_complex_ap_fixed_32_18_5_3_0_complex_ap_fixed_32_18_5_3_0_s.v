// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft2DKernel_convertSuperStreamToArrayNScale_1_0_50000_16_4_complex_ap_fixed_32_18_5_3_0_complex_ap_fixed_32_18_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fftOutData_local_dout,
        fftOutData_local_empty_n,
        fftOutData_local_read,
        p_outDataArray_0_0_0_0_0_din,
        p_outDataArray_0_0_0_0_0_full_n,
        p_outDataArray_0_0_0_0_0_write,
        p_outDataArray_0_0_0_0_01_din,
        p_outDataArray_0_0_0_0_01_full_n,
        p_outDataArray_0_0_0_0_01_write,
        p_outDataArray_0_0_0_0_02_din,
        p_outDataArray_0_0_0_0_02_full_n,
        p_outDataArray_0_0_0_0_02_write,
        p_outDataArray_0_0_0_0_03_din,
        p_outDataArray_0_0_0_0_03_full_n,
        p_outDataArray_0_0_0_0_03_write,
        p_outDataArray_0_1_0_0_0_din,
        p_outDataArray_0_1_0_0_0_full_n,
        p_outDataArray_0_1_0_0_0_write,
        p_outDataArray_0_1_0_0_04_din,
        p_outDataArray_0_1_0_0_04_full_n,
        p_outDataArray_0_1_0_0_04_write,
        p_outDataArray_0_1_0_0_05_din,
        p_outDataArray_0_1_0_0_05_full_n,
        p_outDataArray_0_1_0_0_05_write,
        p_outDataArray_0_1_0_0_06_din,
        p_outDataArray_0_1_0_0_06_full_n,
        p_outDataArray_0_1_0_0_06_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] fftOutData_local_dout;
input   fftOutData_local_empty_n;
output   fftOutData_local_read;
output  [31:0] p_outDataArray_0_0_0_0_0_din;
input   p_outDataArray_0_0_0_0_0_full_n;
output   p_outDataArray_0_0_0_0_0_write;
output  [31:0] p_outDataArray_0_0_0_0_01_din;
input   p_outDataArray_0_0_0_0_01_full_n;
output   p_outDataArray_0_0_0_0_01_write;
output  [31:0] p_outDataArray_0_0_0_0_02_din;
input   p_outDataArray_0_0_0_0_02_full_n;
output   p_outDataArray_0_0_0_0_02_write;
output  [31:0] p_outDataArray_0_0_0_0_03_din;
input   p_outDataArray_0_0_0_0_03_full_n;
output   p_outDataArray_0_0_0_0_03_write;
output  [31:0] p_outDataArray_0_1_0_0_0_din;
input   p_outDataArray_0_1_0_0_0_full_n;
output   p_outDataArray_0_1_0_0_0_write;
output  [31:0] p_outDataArray_0_1_0_0_04_din;
input   p_outDataArray_0_1_0_0_04_full_n;
output   p_outDataArray_0_1_0_0_04_write;
output  [31:0] p_outDataArray_0_1_0_0_05_din;
input   p_outDataArray_0_1_0_0_05_full_n;
output   p_outDataArray_0_1_0_0_05_write;
output  [31:0] p_outDataArray_0_1_0_0_06_din;
input   p_outDataArray_0_1_0_0_06_full_n;
output   p_outDataArray_0_1_0_0_06_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg fftOutData_local_read;
reg p_outDataArray_0_0_0_0_0_write;
reg p_outDataArray_0_0_0_0_01_write;
reg p_outDataArray_0_0_0_0_02_write;
reg p_outDataArray_0_0_0_0_03_write;
reg p_outDataArray_0_1_0_0_0_write;
reg p_outDataArray_0_1_0_0_04_write;
reg p_outDataArray_0_1_0_0_05_write;
reg p_outDataArray_0_1_0_0_06_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    fftOutData_local_blk_n;
wire    ap_CS_fsm_state2;
reg    p_outDataArray_0_0_0_0_0_blk_n;
reg    p_outDataArray_0_0_0_0_01_blk_n;
reg    p_outDataArray_0_0_0_0_02_blk_n;
reg    p_outDataArray_0_0_0_0_03_blk_n;
reg    p_outDataArray_0_1_0_0_0_blk_n;
reg    p_outDataArray_0_1_0_0_04_blk_n;
reg    p_outDataArray_0_1_0_0_05_blk_n;
reg    p_outDataArray_0_1_0_0_06_blk_n;
wire   [1:0] i_fu_255_p2;
wire    io_acc_block_signal_op32;
wire    io_acc_block_signal_op33;
wire    io_acc_block_signal_op34;
wire    io_acc_block_signal_op35;
reg    ap_block_state2;
reg    ap_block_state1;
wire   [0:0] icmp_ln222_fu_261_p2;
reg   [1:0] i1_reg_159;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_int_blocking_cur_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln222_fu_261_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln222_fu_261_p2 == 1'd0))) begin
        i1_reg_159 <= i_fu_255_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln222_fu_261_p2 == 1'd1)))) begin
        i1_reg_159 <= 2'd0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln222_fu_261_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        fftOutData_local_blk_n = fftOutData_local_empty_n;
    end else begin
        fftOutData_local_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        fftOutData_local_read = 1'b1;
    end else begin
        fftOutData_local_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln222_fu_261_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_01_blk_n = p_outDataArray_0_0_0_0_01_full_n;
    end else begin
        p_outDataArray_0_0_0_0_01_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_01_write = 1'b1;
    end else begin
        p_outDataArray_0_0_0_0_01_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_02_blk_n = p_outDataArray_0_0_0_0_02_full_n;
    end else begin
        p_outDataArray_0_0_0_0_02_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_02_write = 1'b1;
    end else begin
        p_outDataArray_0_0_0_0_02_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_03_blk_n = p_outDataArray_0_0_0_0_03_full_n;
    end else begin
        p_outDataArray_0_0_0_0_03_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_03_write = 1'b1;
    end else begin
        p_outDataArray_0_0_0_0_03_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_0_blk_n = p_outDataArray_0_0_0_0_0_full_n;
    end else begin
        p_outDataArray_0_0_0_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_0_0_0_0_write = 1'b1;
    end else begin
        p_outDataArray_0_0_0_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_04_blk_n = p_outDataArray_0_1_0_0_04_full_n;
    end else begin
        p_outDataArray_0_1_0_0_04_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_04_write = 1'b1;
    end else begin
        p_outDataArray_0_1_0_0_04_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_05_blk_n = p_outDataArray_0_1_0_0_05_full_n;
    end else begin
        p_outDataArray_0_1_0_0_05_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_05_write = 1'b1;
    end else begin
        p_outDataArray_0_1_0_0_05_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_06_blk_n = p_outDataArray_0_1_0_0_06_full_n;
    end else begin
        p_outDataArray_0_1_0_0_06_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_06_write = 1'b1;
    end else begin
        p_outDataArray_0_1_0_0_06_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_0_blk_n = p_outDataArray_0_1_0_0_0_full_n;
    end else begin
        p_outDataArray_0_1_0_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_0_1_0_0_0_write = 1'b1;
    end else begin
        p_outDataArray_0_1_0_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((io_acc_block_signal_op32 == 1'b0) | (real_start == 1'b0) | (fftOutData_local_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op34 == 1'b0) | (io_acc_block_signal_op33 == 1'b0));
end

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (p_outDataArray_0_1_0_0_0_blk_n & p_outDataArray_0_1_0_0_06_blk_n & p_outDataArray_0_1_0_0_05_blk_n & p_outDataArray_0_1_0_0_04_blk_n & p_outDataArray_0_0_0_0_0_blk_n & p_outDataArray_0_0_0_0_03_blk_n & p_outDataArray_0_0_0_0_02_blk_n & p_outDataArray_0_0_0_0_01_blk_n & fftOutData_local_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign i_fu_255_p2 = (i1_reg_159 + 2'd1);

assign icmp_ln222_fu_261_p2 = ((i1_reg_159 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op32 = (p_outDataArray_0_1_0_0_0_full_n & p_outDataArray_0_0_0_0_0_full_n);

assign io_acc_block_signal_op33 = (p_outDataArray_0_1_0_0_04_full_n & p_outDataArray_0_0_0_0_01_full_n);

assign io_acc_block_signal_op34 = (p_outDataArray_0_1_0_0_05_full_n & p_outDataArray_0_0_0_0_02_full_n);

assign io_acc_block_signal_op35 = (p_outDataArray_0_1_0_0_06_full_n & p_outDataArray_0_0_0_0_03_full_n);

assign p_outDataArray_0_0_0_0_01_din = {{fftOutData_local_dout[95:64]}};

assign p_outDataArray_0_0_0_0_02_din = {{fftOutData_local_dout[159:128]}};

assign p_outDataArray_0_0_0_0_03_din = {{fftOutData_local_dout[223:192]}};

assign p_outDataArray_0_0_0_0_0_din = fftOutData_local_dout[31:0];

assign p_outDataArray_0_1_0_0_04_din = {{fftOutData_local_dout[127:96]}};

assign p_outDataArray_0_1_0_0_05_din = {{fftOutData_local_dout[191:160]}};

assign p_outDataArray_0_1_0_0_06_din = {{fftOutData_local_dout[255:224]}};

assign p_outDataArray_0_1_0_0_0_din = {{fftOutData_local_dout[63:32]}};

assign start_out = real_start;

endmodule //fft2DKernel_convertSuperStreamToArrayNScale_1_0_50000_16_4_complex_ap_fixed_32_18_5_3_0_complex_ap_fixed_32_18_5_3_0_s
