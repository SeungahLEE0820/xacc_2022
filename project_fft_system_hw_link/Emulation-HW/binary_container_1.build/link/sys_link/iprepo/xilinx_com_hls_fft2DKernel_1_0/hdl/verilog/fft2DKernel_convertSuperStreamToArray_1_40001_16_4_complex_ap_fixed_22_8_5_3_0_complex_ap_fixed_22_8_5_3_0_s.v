// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft2DKernel_convertSuperStreamToArray_1_40001_16_4_complex_ap_fixed_22_8_5_3_0_complex_ap_fixed_22_8_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ssrWideStream4kernelIn_dout,
        ssrWideStream4kernelIn_empty_n,
        ssrWideStream4kernelIn_read,
        p_outDataArray_M_real_address0,
        p_outDataArray_M_real_ce0,
        p_outDataArray_M_real_we0,
        p_outDataArray_M_real_d0,
        p_outDataArray_M_real1_address0,
        p_outDataArray_M_real1_ce0,
        p_outDataArray_M_real1_we0,
        p_outDataArray_M_real1_d0,
        p_outDataArray_M_real2_address0,
        p_outDataArray_M_real2_ce0,
        p_outDataArray_M_real2_we0,
        p_outDataArray_M_real2_d0,
        p_outDataArray_M_real3_address0,
        p_outDataArray_M_real3_ce0,
        p_outDataArray_M_real3_we0,
        p_outDataArray_M_real3_d0,
        p_outDataArray_M_imag_address0,
        p_outDataArray_M_imag_ce0,
        p_outDataArray_M_imag_we0,
        p_outDataArray_M_imag_d0,
        p_outDataArray_M_imag4_address0,
        p_outDataArray_M_imag4_ce0,
        p_outDataArray_M_imag4_we0,
        p_outDataArray_M_imag4_d0,
        p_outDataArray_M_imag5_address0,
        p_outDataArray_M_imag5_ce0,
        p_outDataArray_M_imag5_we0,
        p_outDataArray_M_imag5_d0,
        p_outDataArray_M_imag6_address0,
        p_outDataArray_M_imag6_ce0,
        p_outDataArray_M_imag6_we0,
        p_outDataArray_M_imag6_d0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] ssrWideStream4kernelIn_dout;
input   ssrWideStream4kernelIn_empty_n;
output   ssrWideStream4kernelIn_read;
output  [1:0] p_outDataArray_M_real_address0;
output   p_outDataArray_M_real_ce0;
output   p_outDataArray_M_real_we0;
output  [21:0] p_outDataArray_M_real_d0;
output  [1:0] p_outDataArray_M_real1_address0;
output   p_outDataArray_M_real1_ce0;
output   p_outDataArray_M_real1_we0;
output  [21:0] p_outDataArray_M_real1_d0;
output  [1:0] p_outDataArray_M_real2_address0;
output   p_outDataArray_M_real2_ce0;
output   p_outDataArray_M_real2_we0;
output  [21:0] p_outDataArray_M_real2_d0;
output  [1:0] p_outDataArray_M_real3_address0;
output   p_outDataArray_M_real3_ce0;
output   p_outDataArray_M_real3_we0;
output  [21:0] p_outDataArray_M_real3_d0;
output  [1:0] p_outDataArray_M_imag_address0;
output   p_outDataArray_M_imag_ce0;
output   p_outDataArray_M_imag_we0;
output  [21:0] p_outDataArray_M_imag_d0;
output  [1:0] p_outDataArray_M_imag4_address0;
output   p_outDataArray_M_imag4_ce0;
output   p_outDataArray_M_imag4_we0;
output  [21:0] p_outDataArray_M_imag4_d0;
output  [1:0] p_outDataArray_M_imag5_address0;
output   p_outDataArray_M_imag5_ce0;
output   p_outDataArray_M_imag5_we0;
output  [21:0] p_outDataArray_M_imag5_d0;
output  [1:0] p_outDataArray_M_imag6_address0;
output   p_outDataArray_M_imag6_ce0;
output   p_outDataArray_M_imag6_we0;
output  [21:0] p_outDataArray_M_imag6_d0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ssrWideStream4kernelIn_read;
reg p_outDataArray_M_real_ce0;
reg p_outDataArray_M_real_we0;
reg p_outDataArray_M_real1_ce0;
reg p_outDataArray_M_real1_we0;
reg p_outDataArray_M_real2_ce0;
reg p_outDataArray_M_real2_we0;
reg p_outDataArray_M_real3_ce0;
reg p_outDataArray_M_real3_we0;
reg p_outDataArray_M_imag_ce0;
reg p_outDataArray_M_imag_we0;
reg p_outDataArray_M_imag4_ce0;
reg p_outDataArray_M_imag4_we0;
reg p_outDataArray_M_imag5_ce0;
reg p_outDataArray_M_imag5_we0;
reg p_outDataArray_M_imag6_ce0;
reg p_outDataArray_M_imag6_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ssrWideStream4kernelIn_blk_n;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_323_p2;
reg    ap_block_state2;
reg    ap_block_state1;
wire   [0:0] icmp_ln165_fu_329_p2;
reg   [1:0] i45_reg_215;
wire   [63:0] zext_ln165_fu_229_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_int_blocking_cur_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln165_fu_329_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln165_fu_329_p2 == 1'd0))) begin
        i45_reg_215 <= i_fu_323_p2;
    end else if (((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln165_fu_329_p2 == 1'd1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i45_reg_215 <= 2'd0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln165_fu_329_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln165_fu_329_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag4_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag4_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag5_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag5_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag6_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag6_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_imag_we0 = 1'b1;
    end else begin
        p_outDataArray_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real1_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real1_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real2_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real2_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real3_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real3_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real_ce0 = 1'b1;
    end else begin
        p_outDataArray_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_outDataArray_M_real_we0 = 1'b1;
    end else begin
        p_outDataArray_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        ssrWideStream4kernelIn_blk_n = ssrWideStream4kernelIn_empty_n;
    end else begin
        ssrWideStream4kernelIn_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        ssrWideStream4kernelIn_read = 1'b1;
    end else begin
        ssrWideStream4kernelIn_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((ap_start == 1'b0) | (ssrWideStream4kernelIn_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = ssrWideStream4kernelIn_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign i_fu_323_p2 = (i45_reg_215 + 2'd1);

assign icmp_ln165_fu_329_p2 = ((i45_reg_215 == 2'd3) ? 1'b1 : 1'b0);

assign p_outDataArray_M_imag4_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_imag4_d0 = {{ssrWideStream4kernelIn_dout[117:96]}};

assign p_outDataArray_M_imag5_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_imag5_d0 = {{ssrWideStream4kernelIn_dout[181:160]}};

assign p_outDataArray_M_imag6_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_imag6_d0 = {{ssrWideStream4kernelIn_dout[245:224]}};

assign p_outDataArray_M_imag_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_imag_d0 = {{ssrWideStream4kernelIn_dout[53:32]}};

assign p_outDataArray_M_real1_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_real1_d0 = {{ssrWideStream4kernelIn_dout[85:64]}};

assign p_outDataArray_M_real2_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_real2_d0 = {{ssrWideStream4kernelIn_dout[149:128]}};

assign p_outDataArray_M_real3_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_real3_d0 = {{ssrWideStream4kernelIn_dout[213:192]}};

assign p_outDataArray_M_real_address0 = zext_ln165_fu_229_p1;

assign p_outDataArray_M_real_d0 = ssrWideStream4kernelIn_dout[21:0];

assign zext_ln165_fu_229_p1 = i45_reg_215;

endmodule //fft2DKernel_convertSuperStreamToArray_1_40001_16_4_complex_ap_fixed_22_8_5_3_0_complex_ap_fixed_22_8_5_3_0_s
