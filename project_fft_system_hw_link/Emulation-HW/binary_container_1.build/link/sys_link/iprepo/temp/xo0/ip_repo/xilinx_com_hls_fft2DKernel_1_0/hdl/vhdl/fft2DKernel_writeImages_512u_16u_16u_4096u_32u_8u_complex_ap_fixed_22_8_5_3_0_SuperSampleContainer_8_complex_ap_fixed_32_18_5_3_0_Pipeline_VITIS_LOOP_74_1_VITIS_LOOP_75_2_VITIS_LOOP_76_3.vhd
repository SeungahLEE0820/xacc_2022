-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft2DKernel_writeImages_512u_16u_16u_4096u_32u_8u_complex_ap_fixed_22_8_5_3_0_SuperSampleContainer_8_complex_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_74_1_VITIS_LOOP_75_2_VITIS_LOOP_76_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fftOutStrm_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    fftOutStrm_empty_n : IN STD_LOGIC;
    fftOutStrm_read : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bound5 : IN STD_LOGIC_VECTOR (36 downto 0);
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of fft2DKernel_writeImages_512u_16u_16u_4096u_32u_8u_complex_ap_fixed_22_8_5_3_0_SuperSampleContainer_8_complex_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_74_1_VITIS_LOOP_75_2_VITIS_LOOP_76_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv37_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000000";
    constant ap_const_lv37_1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101101";
    constant ap_const_lv32_CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001110";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001101";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101101";
    constant ap_const_lv32_10E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001110";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001101";
    constant ap_const_lv32_12E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101110";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101101";
    constant ap_const_lv32_14E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001110";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001101";
    constant ap_const_lv32_16E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101110";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101101";
    constant ap_const_lv32_18E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001110";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001101";
    constant ap_const_lv32_1AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101110";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101101";
    constant ap_const_lv32_1CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001110";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001101";
    constant ap_const_lv32_1EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101110";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal empty_77_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter66 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter67 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter68 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter69 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter70 : BOOLEAN;
    signal empty_79_reg_1638 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state72_pp0_stage0_iter71 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln74_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fftOutStrm_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln85_1_mid2_v_reg_1629 : STD_LOGIC_VECTOR (57 downto 0);
    signal empty_77_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_79_reg_1638_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_2_fu_638_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_2_reg_1642 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_5_fu_694_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_5_reg_1647 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_8_fu_750_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_8_reg_1652 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_11_fu_806_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_11_reg_1657 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_14_fu_862_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_14_reg_1662 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_17_fu_918_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_17_reg_1667 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_20_fu_974_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_20_reg_1672 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_23_fu_1030_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_23_reg_1677 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_26_fu_1086_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_26_reg_1682 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_29_fu_1142_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_29_reg_1687 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_32_fu_1198_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_32_reg_1692 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_35_fu_1254_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_35_reg_1697 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_38_fu_1310_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_38_reg_1702 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_41_fu_1366_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_41_reg_1707 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_44_fu_1422_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_44_reg_1712 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_47_fu_1478_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_47_reg_1717 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln75_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal c_fu_232 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln76_fu_528_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_236 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln75_1_fu_490_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_240 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln75_2_fu_542_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_fu_244 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln74_2_fu_413_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten30_fu_248 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln74_fu_343_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln74_fu_320_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_fu_324_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln75_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_1_fu_369_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln74_1_fu_375_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln76_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln74_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_361_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln74_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_1_fu_379_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_74_fu_433_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid_fu_387_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_328_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_mid1_fu_437_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln74_3_fu_447_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln75_fu_455_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln85_1_mid2_v_v_v_v_v_fu_463_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln75_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln75_1_fu_475_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_76_fu_498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_502_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal or_ln75_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_1_fu_522_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln75_2_fu_536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_78_fu_550_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_554_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln902_fu_614_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_fu_596_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_624_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_fu_630_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_6_fu_664_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_3_fu_646_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_1_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_680_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_1_fu_656_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_1_fu_686_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_75_fu_720_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_6_fu_702_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_2_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_7_fu_736_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_2_fu_712_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_2_fu_742_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_5_fu_776_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_9_fu_758_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_3_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_10_fu_792_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_3_fu_768_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_3_fu_798_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_8_fu_832_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_12_fu_814_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_4_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_13_fu_848_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_4_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_4_fu_854_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_9_fu_888_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_15_fu_870_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_5_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_16_fu_904_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_7_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_5_fu_910_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_11_fu_944_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_18_fu_926_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_6_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_19_fu_960_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_10_fu_936_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_6_fu_966_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_13_fu_1000_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_21_fu_982_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_7_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_22_fu_1016_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_12_fu_992_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_7_fu_1022_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_15_fu_1056_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_24_fu_1038_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_8_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_25_fu_1072_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_1048_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_8_fu_1078_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_17_fu_1112_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_27_fu_1094_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_9_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_28_fu_1128_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_1104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_9_fu_1134_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_19_fu_1168_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_30_fu_1150_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_10_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_31_fu_1184_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_18_fu_1160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_10_fu_1190_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_21_fu_1224_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_33_fu_1206_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_11_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_34_fu_1240_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_20_fu_1216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_11_fu_1246_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_23_fu_1280_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_36_fu_1262_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_12_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_37_fu_1296_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_22_fu_1272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_12_fu_1302_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_25_fu_1336_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_39_fu_1318_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_13_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_40_fu_1352_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_24_fu_1328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_13_fu_1358_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_27_fu_1392_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_42_fu_1374_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_14_fu_1402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_43_fu_1408_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_26_fu_1384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_14_fu_1414_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_29_fu_1448_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_45_fu_1430_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln902_15_fu_1458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_46_fu_1464_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_28_fu_1440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_15_fu_1470_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln225_14_fu_1535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_13_fu_1532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_12_fu_1529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_11_fu_1526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_10_fu_1523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_9_fu_1520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_8_fu_1517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_7_fu_1514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_6_fu_1511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_5_fu_1508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_4_fu_1505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_3_fu_1502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_2_fu_1499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_1_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln225_fu_1493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal singleSuperSample_V_fu_1538_p17 : STD_LOGIC_VECTOR (497 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter60_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter61_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter62_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter63_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter64_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter65_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter66_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter67_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter68_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter69_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter70_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft2DKernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fft2DKernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter70_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_232 <= ap_const_lv2_0;
                elsif (((icmp_ln74_fu_338_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    c_fu_232 <= select_ln76_fu_528_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten30_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten30_fu_248 <= ap_const_lv37_0;
                elsif (((icmp_ln74_fu_338_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten30_fu_248 <= add_ln74_fu_343_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_240 <= ap_const_lv7_0;
                elsif (((icmp_ln74_fu_338_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_240 <= select_ln75_2_fu_542_p3;
                end if;
            end if; 
        end if;
    end process;

    n_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_244 <= ap_const_lv31_0;
                elsif (((icmp_ln74_fu_338_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    n_fu_244 <= select_ln74_2_fu_413_p3;
                end if;
            end if; 
        end if;
    end process;

    r_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_236 <= ap_const_lv5_0;
                elsif (((icmp_ln74_fu_338_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    r_fu_236 <= select_ln75_1_fu_490_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
                ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
                ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
                ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
                ap_loop_exit_ready_pp0_iter64_reg <= ap_loop_exit_ready_pp0_iter63_reg;
                ap_loop_exit_ready_pp0_iter65_reg <= ap_loop_exit_ready_pp0_iter64_reg;
                ap_loop_exit_ready_pp0_iter66_reg <= ap_loop_exit_ready_pp0_iter65_reg;
                ap_loop_exit_ready_pp0_iter67_reg <= ap_loop_exit_ready_pp0_iter66_reg;
                ap_loop_exit_ready_pp0_iter68_reg <= ap_loop_exit_ready_pp0_iter67_reg;
                ap_loop_exit_ready_pp0_iter69_reg <= ap_loop_exit_ready_pp0_iter68_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter70_reg <= ap_loop_exit_ready_pp0_iter69_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_79_reg_1638_pp0_iter10_reg <= empty_79_reg_1638_pp0_iter9_reg;
                empty_79_reg_1638_pp0_iter11_reg <= empty_79_reg_1638_pp0_iter10_reg;
                empty_79_reg_1638_pp0_iter12_reg <= empty_79_reg_1638_pp0_iter11_reg;
                empty_79_reg_1638_pp0_iter13_reg <= empty_79_reg_1638_pp0_iter12_reg;
                empty_79_reg_1638_pp0_iter14_reg <= empty_79_reg_1638_pp0_iter13_reg;
                empty_79_reg_1638_pp0_iter15_reg <= empty_79_reg_1638_pp0_iter14_reg;
                empty_79_reg_1638_pp0_iter16_reg <= empty_79_reg_1638_pp0_iter15_reg;
                empty_79_reg_1638_pp0_iter17_reg <= empty_79_reg_1638_pp0_iter16_reg;
                empty_79_reg_1638_pp0_iter18_reg <= empty_79_reg_1638_pp0_iter17_reg;
                empty_79_reg_1638_pp0_iter19_reg <= empty_79_reg_1638_pp0_iter18_reg;
                empty_79_reg_1638_pp0_iter20_reg <= empty_79_reg_1638_pp0_iter19_reg;
                empty_79_reg_1638_pp0_iter21_reg <= empty_79_reg_1638_pp0_iter20_reg;
                empty_79_reg_1638_pp0_iter22_reg <= empty_79_reg_1638_pp0_iter21_reg;
                empty_79_reg_1638_pp0_iter23_reg <= empty_79_reg_1638_pp0_iter22_reg;
                empty_79_reg_1638_pp0_iter24_reg <= empty_79_reg_1638_pp0_iter23_reg;
                empty_79_reg_1638_pp0_iter25_reg <= empty_79_reg_1638_pp0_iter24_reg;
                empty_79_reg_1638_pp0_iter26_reg <= empty_79_reg_1638_pp0_iter25_reg;
                empty_79_reg_1638_pp0_iter27_reg <= empty_79_reg_1638_pp0_iter26_reg;
                empty_79_reg_1638_pp0_iter28_reg <= empty_79_reg_1638_pp0_iter27_reg;
                empty_79_reg_1638_pp0_iter29_reg <= empty_79_reg_1638_pp0_iter28_reg;
                empty_79_reg_1638_pp0_iter2_reg <= empty_79_reg_1638;
                empty_79_reg_1638_pp0_iter30_reg <= empty_79_reg_1638_pp0_iter29_reg;
                empty_79_reg_1638_pp0_iter31_reg <= empty_79_reg_1638_pp0_iter30_reg;
                empty_79_reg_1638_pp0_iter32_reg <= empty_79_reg_1638_pp0_iter31_reg;
                empty_79_reg_1638_pp0_iter33_reg <= empty_79_reg_1638_pp0_iter32_reg;
                empty_79_reg_1638_pp0_iter34_reg <= empty_79_reg_1638_pp0_iter33_reg;
                empty_79_reg_1638_pp0_iter35_reg <= empty_79_reg_1638_pp0_iter34_reg;
                empty_79_reg_1638_pp0_iter36_reg <= empty_79_reg_1638_pp0_iter35_reg;
                empty_79_reg_1638_pp0_iter37_reg <= empty_79_reg_1638_pp0_iter36_reg;
                empty_79_reg_1638_pp0_iter38_reg <= empty_79_reg_1638_pp0_iter37_reg;
                empty_79_reg_1638_pp0_iter39_reg <= empty_79_reg_1638_pp0_iter38_reg;
                empty_79_reg_1638_pp0_iter3_reg <= empty_79_reg_1638_pp0_iter2_reg;
                empty_79_reg_1638_pp0_iter40_reg <= empty_79_reg_1638_pp0_iter39_reg;
                empty_79_reg_1638_pp0_iter41_reg <= empty_79_reg_1638_pp0_iter40_reg;
                empty_79_reg_1638_pp0_iter42_reg <= empty_79_reg_1638_pp0_iter41_reg;
                empty_79_reg_1638_pp0_iter43_reg <= empty_79_reg_1638_pp0_iter42_reg;
                empty_79_reg_1638_pp0_iter44_reg <= empty_79_reg_1638_pp0_iter43_reg;
                empty_79_reg_1638_pp0_iter45_reg <= empty_79_reg_1638_pp0_iter44_reg;
                empty_79_reg_1638_pp0_iter46_reg <= empty_79_reg_1638_pp0_iter45_reg;
                empty_79_reg_1638_pp0_iter47_reg <= empty_79_reg_1638_pp0_iter46_reg;
                empty_79_reg_1638_pp0_iter48_reg <= empty_79_reg_1638_pp0_iter47_reg;
                empty_79_reg_1638_pp0_iter49_reg <= empty_79_reg_1638_pp0_iter48_reg;
                empty_79_reg_1638_pp0_iter4_reg <= empty_79_reg_1638_pp0_iter3_reg;
                empty_79_reg_1638_pp0_iter50_reg <= empty_79_reg_1638_pp0_iter49_reg;
                empty_79_reg_1638_pp0_iter51_reg <= empty_79_reg_1638_pp0_iter50_reg;
                empty_79_reg_1638_pp0_iter52_reg <= empty_79_reg_1638_pp0_iter51_reg;
                empty_79_reg_1638_pp0_iter53_reg <= empty_79_reg_1638_pp0_iter52_reg;
                empty_79_reg_1638_pp0_iter54_reg <= empty_79_reg_1638_pp0_iter53_reg;
                empty_79_reg_1638_pp0_iter55_reg <= empty_79_reg_1638_pp0_iter54_reg;
                empty_79_reg_1638_pp0_iter56_reg <= empty_79_reg_1638_pp0_iter55_reg;
                empty_79_reg_1638_pp0_iter57_reg <= empty_79_reg_1638_pp0_iter56_reg;
                empty_79_reg_1638_pp0_iter58_reg <= empty_79_reg_1638_pp0_iter57_reg;
                empty_79_reg_1638_pp0_iter59_reg <= empty_79_reg_1638_pp0_iter58_reg;
                empty_79_reg_1638_pp0_iter5_reg <= empty_79_reg_1638_pp0_iter4_reg;
                empty_79_reg_1638_pp0_iter60_reg <= empty_79_reg_1638_pp0_iter59_reg;
                empty_79_reg_1638_pp0_iter61_reg <= empty_79_reg_1638_pp0_iter60_reg;
                empty_79_reg_1638_pp0_iter62_reg <= empty_79_reg_1638_pp0_iter61_reg;
                empty_79_reg_1638_pp0_iter63_reg <= empty_79_reg_1638_pp0_iter62_reg;
                empty_79_reg_1638_pp0_iter64_reg <= empty_79_reg_1638_pp0_iter63_reg;
                empty_79_reg_1638_pp0_iter65_reg <= empty_79_reg_1638_pp0_iter64_reg;
                empty_79_reg_1638_pp0_iter66_reg <= empty_79_reg_1638_pp0_iter65_reg;
                empty_79_reg_1638_pp0_iter67_reg <= empty_79_reg_1638_pp0_iter66_reg;
                empty_79_reg_1638_pp0_iter68_reg <= empty_79_reg_1638_pp0_iter67_reg;
                empty_79_reg_1638_pp0_iter69_reg <= empty_79_reg_1638_pp0_iter68_reg;
                empty_79_reg_1638_pp0_iter6_reg <= empty_79_reg_1638_pp0_iter5_reg;
                empty_79_reg_1638_pp0_iter70_reg <= empty_79_reg_1638_pp0_iter69_reg;
                empty_79_reg_1638_pp0_iter7_reg <= empty_79_reg_1638_pp0_iter6_reg;
                empty_79_reg_1638_pp0_iter8_reg <= empty_79_reg_1638_pp0_iter7_reg;
                empty_79_reg_1638_pp0_iter9_reg <= empty_79_reg_1638_pp0_iter8_reg;
                ret_V_11_reg_1657 <= ret_V_11_fu_806_p3;
                ret_V_14_reg_1662 <= ret_V_14_fu_862_p3;
                ret_V_17_reg_1667 <= ret_V_17_fu_918_p3;
                ret_V_20_reg_1672 <= ret_V_20_fu_974_p3;
                ret_V_23_reg_1677 <= ret_V_23_fu_1030_p3;
                ret_V_26_reg_1682 <= ret_V_26_fu_1086_p3;
                ret_V_29_reg_1687 <= ret_V_29_fu_1142_p3;
                ret_V_2_reg_1642 <= ret_V_2_fu_638_p3;
                ret_V_32_reg_1692 <= ret_V_32_fu_1198_p3;
                ret_V_35_reg_1697 <= ret_V_35_fu_1254_p3;
                ret_V_38_reg_1702 <= ret_V_38_fu_1310_p3;
                ret_V_41_reg_1707 <= ret_V_41_fu_1366_p3;
                ret_V_44_reg_1712 <= ret_V_44_fu_1422_p3;
                ret_V_47_reg_1717 <= ret_V_47_fu_1478_p3;
                ret_V_5_reg_1647 <= ret_V_5_fu_694_p3;
                ret_V_8_reg_1652 <= ret_V_8_fu_750_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_338_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_77_reg_1634 <= empty_77_fu_510_p2;
                empty_79_reg_1638 <= empty_79_fu_562_p2;
                sext_ln85_1_mid2_v_reg_1629 <= add_ln75_1_fu_475_p2(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln74_1_fu_369_p2 <= std_logic_vector(unsigned(n_fu_244) + unsigned(ap_const_lv31_1));
    add_ln74_fu_343_p2 <= std_logic_vector(unsigned(indvar_flatten30_fu_248) + unsigned(ap_const_lv37_1));
    add_ln75_1_fu_475_p2 <= std_logic_vector(unsigned(zext_ln75_fu_471_p1) + unsigned(p_read));
    add_ln75_2_fu_536_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_240) + unsigned(ap_const_lv7_1));
    add_ln75_fu_421_p2 <= std_logic_vector(unsigned(select_ln74_fu_361_p3) + unsigned(ap_const_lv5_1));
    add_ln76_1_fu_522_p2 <= std_logic_vector(unsigned(c_fu_232) + unsigned(ap_const_lv2_1));
    and_ln74_fu_407_p2 <= (xor_ln74_fu_395_p2 and icmp_ln76_fu_401_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter71, fftOutStrm_empty_n, m_axi_gmem_BVALID, empty_79_reg_1638_pp0_iter70_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((empty_79_reg_1638_pp0_iter70_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (fftOutStrm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter71, fftOutStrm_empty_n, m_axi_gmem_WREADY, m_axi_gmem_BVALID, ap_block_state3_io, empty_79_reg_1638_pp0_iter70_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((empty_79_reg_1638_pp0_iter70_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (m_axi_gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((fftOutStrm_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter71, fftOutStrm_empty_n, m_axi_gmem_WREADY, m_axi_gmem_BVALID, ap_block_state3_io, empty_79_reg_1638_pp0_iter70_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((empty_79_reg_1638_pp0_iter70_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (m_axi_gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((fftOutStrm_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_gmem_AWREADY, empty_77_reg_1634)
    begin
                ap_block_state3_io <= ((empty_77_reg_1634 = ap_const_lv1_1) and (m_axi_gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(fftOutStrm_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (fftOutStrm_empty_n = ap_const_logic_0);
    end process;

        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter67 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter68 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter70 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state72_pp0_stage0_iter71_assign_proc : process(m_axi_gmem_BVALID, empty_79_reg_1638_pp0_iter70_reg)
    begin
                ap_block_state72_pp0_stage0_iter71 <= ((empty_79_reg_1638_pp0_iter70_reg = ap_const_lv1_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln74_fu_338_p2)
    begin
        if (((icmp_ln74_fu_338_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter70_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter70_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_cur_n <= (gmem_blk_n_W and gmem_blk_n_B and gmem_blk_n_AW);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (fftOutStrm_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    empty_74_fu_433_p1 <= add_ln75_fu_421_p2(4 - 1 downto 0);
    empty_76_fu_498_p1 <= indvar_flatten30_fu_248(1 - 1 downto 0);
    empty_77_fu_510_p2 <= "1" when (tmp_17_fu_502_p3 = ap_const_lv37_0) else "0";
    empty_78_fu_550_p1 <= add_ln74_fu_343_p2(1 - 1 downto 0);
    empty_79_fu_562_p2 <= "1" when (tmp_18_fu_554_p3 = ap_const_lv37_0) else "0";
    empty_fu_324_p1 <= r_fu_236(4 - 1 downto 0);

    fftOutStrm_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, fftOutStrm_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fftOutStrm_blk_n <= fftOutStrm_empty_n;
        else 
            fftOutStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fftOutStrm_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fftOutStrm_read <= ap_const_logic_1;
        else 
            fftOutStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_AWREADY, empty_77_reg_1634, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_77_reg_1634 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter71, m_axi_gmem_BVALID, empty_79_reg_1638_pp0_iter70_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_79_reg_1638_pp0_iter70_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln74_fu_338_p2 <= "1" when (indvar_flatten30_fu_248 = bound5) else "0";
    icmp_ln75_fu_355_p2 <= "1" when (indvar_flatten_fu_240 = ap_const_lv7_20) else "0";
    icmp_ln76_fu_401_p2 <= "1" when (c_fu_232 = ap_const_lv2_2) else "0";
    icmp_ln902_10_fu_1178_p2 <= "1" when (p_Result_19_fu_1168_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_11_fu_1234_p2 <= "1" when (p_Result_21_fu_1224_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_12_fu_1290_p2 <= "1" when (p_Result_23_fu_1280_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_13_fu_1346_p2 <= "1" when (p_Result_25_fu_1336_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_14_fu_1402_p2 <= "1" when (p_Result_27_fu_1392_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_15_fu_1458_p2 <= "1" when (p_Result_29_fu_1448_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_1_fu_674_p2 <= "1" when (p_Result_6_fu_664_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_2_fu_730_p2 <= "1" when (p_Result_s_75_fu_720_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_3_fu_786_p2 <= "1" when (p_Result_5_fu_776_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_4_fu_842_p2 <= "1" when (p_Result_8_fu_832_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_5_fu_898_p2 <= "1" when (p_Result_9_fu_888_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_6_fu_954_p2 <= "1" when (p_Result_11_fu_944_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_7_fu_1010_p2 <= "1" when (p_Result_13_fu_1000_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_8_fu_1066_p2 <= "1" when (p_Result_15_fu_1056_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_9_fu_1122_p2 <= "1" when (p_Result_17_fu_1112_p4 = ap_const_lv14_0) else "0";
    icmp_ln902_fu_618_p2 <= "1" when (trunc_ln902_fu_614_p1 = ap_const_lv14_0) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= sext_ln75_fu_593_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_2;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, empty_77_reg_1634, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_77_reg_1634 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter71, empty_79_reg_1638_pp0_iter70_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_79_reg_1638_pp0_iter70_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;
        m_axi_gmem_WDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(singleSuperSample_V_fu_1538_p17),512));

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln75_fu_427_p2 <= (icmp_ln75_fu_355_p2 or and_ln74_fu_407_p2);
    p_Result_10_fu_936_p3 <= fftOutStrm_dout(223 downto 223);
    p_Result_11_fu_944_p4 <= fftOutStrm_dout(205 downto 192);
    p_Result_12_fu_992_p3 <= fftOutStrm_dout(255 downto 255);
    p_Result_13_fu_1000_p4 <= fftOutStrm_dout(237 downto 224);
    p_Result_14_fu_1048_p3 <= fftOutStrm_dout(287 downto 287);
    p_Result_15_fu_1056_p4 <= fftOutStrm_dout(269 downto 256);
    p_Result_16_fu_1104_p3 <= fftOutStrm_dout(319 downto 319);
    p_Result_17_fu_1112_p4 <= fftOutStrm_dout(301 downto 288);
    p_Result_18_fu_1160_p3 <= fftOutStrm_dout(351 downto 351);
    p_Result_19_fu_1168_p4 <= fftOutStrm_dout(333 downto 320);
    p_Result_1_fu_656_p3 <= fftOutStrm_dout(63 downto 63);
    p_Result_20_fu_1216_p3 <= fftOutStrm_dout(383 downto 383);
    p_Result_21_fu_1224_p4 <= fftOutStrm_dout(365 downto 352);
    p_Result_22_fu_1272_p3 <= fftOutStrm_dout(415 downto 415);
    p_Result_23_fu_1280_p4 <= fftOutStrm_dout(397 downto 384);
    p_Result_24_fu_1328_p3 <= fftOutStrm_dout(447 downto 447);
    p_Result_25_fu_1336_p4 <= fftOutStrm_dout(429 downto 416);
    p_Result_26_fu_1384_p3 <= fftOutStrm_dout(479 downto 479);
    p_Result_27_fu_1392_p4 <= fftOutStrm_dout(461 downto 448);
    p_Result_28_fu_1440_p3 <= fftOutStrm_dout(511 downto 511);
    p_Result_29_fu_1448_p4 <= fftOutStrm_dout(493 downto 480);
    p_Result_2_fu_712_p3 <= fftOutStrm_dout(95 downto 95);
    p_Result_3_fu_768_p3 <= fftOutStrm_dout(127 downto 127);
    p_Result_4_fu_824_p3 <= fftOutStrm_dout(159 downto 159);
    p_Result_5_fu_776_p4 <= fftOutStrm_dout(109 downto 96);
    p_Result_6_fu_664_p4 <= fftOutStrm_dout(45 downto 32);
    p_Result_7_fu_880_p3 <= fftOutStrm_dout(191 downto 191);
    p_Result_8_fu_832_p4 <= fftOutStrm_dout(141 downto 128);
    p_Result_9_fu_888_p4 <= fftOutStrm_dout(173 downto 160);
    p_Result_s_75_fu_720_p4 <= fftOutStrm_dout(77 downto 64);
    p_Result_s_fu_606_p3 <= fftOutStrm_dout(31 downto 31);
    ret_V_10_fu_792_p2 <= std_logic_vector(unsigned(ret_V_9_fu_758_p4) + unsigned(ap_const_lv18_1));
    ret_V_11_fu_806_p3 <= 
        select_ln901_3_fu_798_p3 when (p_Result_3_fu_768_p3(0) = '1') else 
        ret_V_9_fu_758_p4;
    ret_V_12_fu_814_p4 <= fftOutStrm_dout(159 downto 142);
    ret_V_13_fu_848_p2 <= std_logic_vector(unsigned(ret_V_12_fu_814_p4) + unsigned(ap_const_lv18_1));
    ret_V_14_fu_862_p3 <= 
        select_ln901_4_fu_854_p3 when (p_Result_4_fu_824_p3(0) = '1') else 
        ret_V_12_fu_814_p4;
    ret_V_15_fu_870_p4 <= fftOutStrm_dout(191 downto 174);
    ret_V_16_fu_904_p2 <= std_logic_vector(unsigned(ret_V_15_fu_870_p4) + unsigned(ap_const_lv18_1));
    ret_V_17_fu_918_p3 <= 
        select_ln901_5_fu_910_p3 when (p_Result_7_fu_880_p3(0) = '1') else 
        ret_V_15_fu_870_p4;
    ret_V_18_fu_926_p4 <= fftOutStrm_dout(223 downto 206);
    ret_V_19_fu_960_p2 <= std_logic_vector(unsigned(ret_V_18_fu_926_p4) + unsigned(ap_const_lv18_1));
    ret_V_1_fu_624_p2 <= std_logic_vector(unsigned(ret_V_fu_596_p4) + unsigned(ap_const_lv18_1));
    ret_V_20_fu_974_p3 <= 
        select_ln901_6_fu_966_p3 when (p_Result_10_fu_936_p3(0) = '1') else 
        ret_V_18_fu_926_p4;
    ret_V_21_fu_982_p4 <= fftOutStrm_dout(255 downto 238);
    ret_V_22_fu_1016_p2 <= std_logic_vector(unsigned(ret_V_21_fu_982_p4) + unsigned(ap_const_lv18_1));
    ret_V_23_fu_1030_p3 <= 
        select_ln901_7_fu_1022_p3 when (p_Result_12_fu_992_p3(0) = '1') else 
        ret_V_21_fu_982_p4;
    ret_V_24_fu_1038_p4 <= fftOutStrm_dout(287 downto 270);
    ret_V_25_fu_1072_p2 <= std_logic_vector(unsigned(ret_V_24_fu_1038_p4) + unsigned(ap_const_lv18_1));
    ret_V_26_fu_1086_p3 <= 
        select_ln901_8_fu_1078_p3 when (p_Result_14_fu_1048_p3(0) = '1') else 
        ret_V_24_fu_1038_p4;
    ret_V_27_fu_1094_p4 <= fftOutStrm_dout(319 downto 302);
    ret_V_28_fu_1128_p2 <= std_logic_vector(unsigned(ret_V_27_fu_1094_p4) + unsigned(ap_const_lv18_1));
    ret_V_29_fu_1142_p3 <= 
        select_ln901_9_fu_1134_p3 when (p_Result_16_fu_1104_p3(0) = '1') else 
        ret_V_27_fu_1094_p4;
    ret_V_2_fu_638_p3 <= 
        select_ln901_fu_630_p3 when (p_Result_s_fu_606_p3(0) = '1') else 
        ret_V_fu_596_p4;
    ret_V_30_fu_1150_p4 <= fftOutStrm_dout(351 downto 334);
    ret_V_31_fu_1184_p2 <= std_logic_vector(unsigned(ret_V_30_fu_1150_p4) + unsigned(ap_const_lv18_1));
    ret_V_32_fu_1198_p3 <= 
        select_ln901_10_fu_1190_p3 when (p_Result_18_fu_1160_p3(0) = '1') else 
        ret_V_30_fu_1150_p4;
    ret_V_33_fu_1206_p4 <= fftOutStrm_dout(383 downto 366);
    ret_V_34_fu_1240_p2 <= std_logic_vector(unsigned(ret_V_33_fu_1206_p4) + unsigned(ap_const_lv18_1));
    ret_V_35_fu_1254_p3 <= 
        select_ln901_11_fu_1246_p3 when (p_Result_20_fu_1216_p3(0) = '1') else 
        ret_V_33_fu_1206_p4;
    ret_V_36_fu_1262_p4 <= fftOutStrm_dout(415 downto 398);
    ret_V_37_fu_1296_p2 <= std_logic_vector(unsigned(ret_V_36_fu_1262_p4) + unsigned(ap_const_lv18_1));
    ret_V_38_fu_1310_p3 <= 
        select_ln901_12_fu_1302_p3 when (p_Result_22_fu_1272_p3(0) = '1') else 
        ret_V_36_fu_1262_p4;
    ret_V_39_fu_1318_p4 <= fftOutStrm_dout(447 downto 430);
    ret_V_3_fu_646_p4 <= fftOutStrm_dout(63 downto 46);
    ret_V_40_fu_1352_p2 <= std_logic_vector(unsigned(ret_V_39_fu_1318_p4) + unsigned(ap_const_lv18_1));
    ret_V_41_fu_1366_p3 <= 
        select_ln901_13_fu_1358_p3 when (p_Result_24_fu_1328_p3(0) = '1') else 
        ret_V_39_fu_1318_p4;
    ret_V_42_fu_1374_p4 <= fftOutStrm_dout(479 downto 462);
    ret_V_43_fu_1408_p2 <= std_logic_vector(unsigned(ret_V_42_fu_1374_p4) + unsigned(ap_const_lv18_1));
    ret_V_44_fu_1422_p3 <= 
        select_ln901_14_fu_1414_p3 when (p_Result_26_fu_1384_p3(0) = '1') else 
        ret_V_42_fu_1374_p4;
    ret_V_45_fu_1430_p4 <= fftOutStrm_dout(511 downto 494);
    ret_V_46_fu_1464_p2 <= std_logic_vector(unsigned(ret_V_45_fu_1430_p4) + unsigned(ap_const_lv18_1));
    ret_V_47_fu_1478_p3 <= 
        select_ln901_15_fu_1470_p3 when (p_Result_28_fu_1440_p3(0) = '1') else 
        ret_V_45_fu_1430_p4;
    ret_V_4_fu_680_p2 <= std_logic_vector(unsigned(ret_V_3_fu_646_p4) + unsigned(ap_const_lv18_1));
    ret_V_5_fu_694_p3 <= 
        select_ln901_1_fu_686_p3 when (p_Result_1_fu_656_p3(0) = '1') else 
        ret_V_3_fu_646_p4;
    ret_V_6_fu_702_p4 <= fftOutStrm_dout(95 downto 78);
    ret_V_7_fu_736_p2 <= std_logic_vector(unsigned(ret_V_6_fu_702_p4) + unsigned(ap_const_lv18_1));
    ret_V_8_fu_750_p3 <= 
        select_ln901_2_fu_742_p3 when (p_Result_2_fu_712_p3(0) = '1') else 
        ret_V_6_fu_702_p4;
    ret_V_9_fu_758_p4 <= fftOutStrm_dout(127 downto 110);
    ret_V_fu_596_p4 <= fftOutStrm_dout(31 downto 14);
    select_ln74_1_fu_379_p3 <= 
        trunc_ln74_1_fu_375_p1 when (icmp_ln75_fu_355_p2(0) = '1') else 
        trunc_ln74_fu_320_p1;
    select_ln74_2_fu_413_p3 <= 
        add_ln74_1_fu_369_p2 when (icmp_ln75_fu_355_p2(0) = '1') else 
        n_fu_244;
    select_ln74_3_fu_447_p3 <= 
        tmp_mid_fu_387_p3 when (icmp_ln75_fu_355_p2(0) = '1') else 
        tmp_fu_328_p4;
    select_ln74_fu_361_p3 <= 
        ap_const_lv5_0 when (icmp_ln75_fu_355_p2(0) = '1') else 
        r_fu_236;
    select_ln75_1_fu_490_p3 <= 
        add_ln75_fu_421_p2 when (and_ln74_fu_407_p2(0) = '1') else 
        select_ln74_fu_361_p3;
    select_ln75_2_fu_542_p3 <= 
        ap_const_lv7_1 when (icmp_ln75_fu_355_p2(0) = '1') else 
        add_ln75_2_fu_536_p2;
    select_ln75_fu_455_p3 <= 
        tmp_mid1_fu_437_p4 when (and_ln74_fu_407_p2(0) = '1') else 
        select_ln74_3_fu_447_p3;
    select_ln76_fu_528_p3 <= 
        ap_const_lv2_1 when (or_ln75_fu_427_p2(0) = '1') else 
        add_ln76_1_fu_522_p2;
    select_ln901_10_fu_1190_p3 <= 
        ret_V_30_fu_1150_p4 when (icmp_ln902_10_fu_1178_p2(0) = '1') else 
        ret_V_31_fu_1184_p2;
    select_ln901_11_fu_1246_p3 <= 
        ret_V_33_fu_1206_p4 when (icmp_ln902_11_fu_1234_p2(0) = '1') else 
        ret_V_34_fu_1240_p2;
    select_ln901_12_fu_1302_p3 <= 
        ret_V_36_fu_1262_p4 when (icmp_ln902_12_fu_1290_p2(0) = '1') else 
        ret_V_37_fu_1296_p2;
    select_ln901_13_fu_1358_p3 <= 
        ret_V_39_fu_1318_p4 when (icmp_ln902_13_fu_1346_p2(0) = '1') else 
        ret_V_40_fu_1352_p2;
    select_ln901_14_fu_1414_p3 <= 
        ret_V_42_fu_1374_p4 when (icmp_ln902_14_fu_1402_p2(0) = '1') else 
        ret_V_43_fu_1408_p2;
    select_ln901_15_fu_1470_p3 <= 
        ret_V_45_fu_1430_p4 when (icmp_ln902_15_fu_1458_p2(0) = '1') else 
        ret_V_46_fu_1464_p2;
    select_ln901_1_fu_686_p3 <= 
        ret_V_3_fu_646_p4 when (icmp_ln902_1_fu_674_p2(0) = '1') else 
        ret_V_4_fu_680_p2;
    select_ln901_2_fu_742_p3 <= 
        ret_V_6_fu_702_p4 when (icmp_ln902_2_fu_730_p2(0) = '1') else 
        ret_V_7_fu_736_p2;
    select_ln901_3_fu_798_p3 <= 
        ret_V_9_fu_758_p4 when (icmp_ln902_3_fu_786_p2(0) = '1') else 
        ret_V_10_fu_792_p2;
    select_ln901_4_fu_854_p3 <= 
        ret_V_12_fu_814_p4 when (icmp_ln902_4_fu_842_p2(0) = '1') else 
        ret_V_13_fu_848_p2;
    select_ln901_5_fu_910_p3 <= 
        ret_V_15_fu_870_p4 when (icmp_ln902_5_fu_898_p2(0) = '1') else 
        ret_V_16_fu_904_p2;
    select_ln901_6_fu_966_p3 <= 
        ret_V_18_fu_926_p4 when (icmp_ln902_6_fu_954_p2(0) = '1') else 
        ret_V_19_fu_960_p2;
    select_ln901_7_fu_1022_p3 <= 
        ret_V_21_fu_982_p4 when (icmp_ln902_7_fu_1010_p2(0) = '1') else 
        ret_V_22_fu_1016_p2;
    select_ln901_8_fu_1078_p3 <= 
        ret_V_24_fu_1038_p4 when (icmp_ln902_8_fu_1066_p2(0) = '1') else 
        ret_V_25_fu_1072_p2;
    select_ln901_9_fu_1134_p3 <= 
        ret_V_27_fu_1094_p4 when (icmp_ln902_9_fu_1122_p2(0) = '1') else 
        ret_V_28_fu_1128_p2;
    select_ln901_fu_630_p3 <= 
        ret_V_fu_596_p4 when (icmp_ln902_fu_618_p2(0) = '1') else 
        ret_V_1_fu_624_p2;
        sext_ln225_10_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_32_reg_1692),32));

        sext_ln225_11_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_35_reg_1697),32));

        sext_ln225_12_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_38_reg_1702),32));

        sext_ln225_13_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_41_reg_1707),32));

        sext_ln225_14_fu_1535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_44_reg_1712),32));

        sext_ln225_1_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_5_reg_1647),32));

        sext_ln225_2_fu_1499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_8_reg_1652),32));

        sext_ln225_3_fu_1502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_11_reg_1657),32));

        sext_ln225_4_fu_1505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_reg_1662),32));

        sext_ln225_5_fu_1508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_17_reg_1667),32));

        sext_ln225_6_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_20_reg_1672),32));

        sext_ln225_7_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_23_reg_1677),32));

        sext_ln225_8_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_26_reg_1682),32));

        sext_ln225_9_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_29_reg_1687),32));

        sext_ln225_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_2_reg_1642),32));

        sext_ln75_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln85_1_mid2_v_reg_1629),64));

    sext_ln85_1_mid2_v_v_v_v_v_fu_463_p3 <= (select_ln75_fu_455_p3 & ap_const_lv6_0);
    singleSuperSample_V_fu_1538_p17 <= (((((((((((((((ret_V_47_reg_1717 & sext_ln225_14_fu_1535_p1) & sext_ln225_13_fu_1532_p1) & sext_ln225_12_fu_1529_p1) & sext_ln225_11_fu_1526_p1) & sext_ln225_10_fu_1523_p1) & sext_ln225_9_fu_1520_p1) & sext_ln225_8_fu_1517_p1) & sext_ln225_7_fu_1514_p1) & sext_ln225_6_fu_1511_p1) & sext_ln225_5_fu_1508_p1) & sext_ln225_4_fu_1505_p1) & sext_ln225_3_fu_1502_p1) & sext_ln225_2_fu_1499_p1) & sext_ln225_1_fu_1496_p1) & sext_ln225_fu_1493_p1);
    tmp_17_fu_502_p3 <= (ap_const_lv36_0 & empty_76_fu_498_p1);
    tmp_18_fu_554_p3 <= (ap_const_lv36_0 & empty_78_fu_550_p1);
    tmp_fu_328_p4 <= ((trunc_ln74_fu_320_p1 & empty_fu_324_p1) & ap_const_lv1_0);
    tmp_mid1_fu_437_p4 <= ((select_ln74_1_fu_379_p3 & empty_74_fu_433_p1) & ap_const_lv1_0);
    tmp_mid_fu_387_p3 <= (trunc_ln74_1_fu_375_p1 & ap_const_lv5_0);
    trunc_ln74_1_fu_375_p1 <= add_ln74_1_fu_369_p2(24 - 1 downto 0);
    trunc_ln74_fu_320_p1 <= n_fu_244(24 - 1 downto 0);
    trunc_ln902_fu_614_p1 <= fftOutStrm_dout(14 - 1 downto 0);
    xor_ln74_fu_395_p2 <= (icmp_ln75_fu_355_p2 xor ap_const_lv1_1);
    zext_ln75_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln85_1_mid2_v_v_v_v_v_fu_463_p3),64));
end behav;
